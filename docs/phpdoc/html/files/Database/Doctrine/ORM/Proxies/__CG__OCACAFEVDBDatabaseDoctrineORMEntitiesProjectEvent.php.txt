<?php

namespace OCA\CAFEVDB\Database\Doctrine\ORM\Proxies\__CG__\OCA\CAFEVDB\Database\Doctrine\ORM\Entities;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ProjectEvent extends \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\ProjectEvent implements \OCA\CAFEVDB\Wrapped\Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'project', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'eventUri', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'eventUid', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'calendarId', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'calendarUri', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'type', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'keys'];
        }

        return ['__isInitialized__', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'project', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'eventUri', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'eventUid', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'calendarId', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'calendarUri', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'type', '' . "\0" . 'OCA\\CAFEVDB\\Database\\Doctrine\\ORM\\Entities\\ProjectEvent' . "\0" . 'keys'];
    }

    /**
     * {@inheritDoc}
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ProjectEvent $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
        parent::__wakeup();
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setProject($project): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\ProjectEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProject', [$project]);

        return parent::setProject($project);
    }

    /**
     * {@inheritDoc}
     */
    public function getProject(): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\Project
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProject', []);

        return parent::getProject();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalendarId($calendarId): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\ProjectEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalendarId', [$calendarId]);

        return parent::setCalendarId($calendarId);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalendarId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalendarId', []);

        return parent::getCalendarId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCalendarUri(string $calendarUri): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\ProjectEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCalendarUri', [$calendarUri]);

        return parent::setCalendarUri($calendarUri);
    }

    /**
     * {@inheritDoc}
     */
    public function getCalendarUri(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCalendarUri', []);

        return parent::getCalendarUri();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventUri($eventUri)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventUri', [$eventUri]);

        return parent::setEventUri($eventUri);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventUri()
    {
        if ($this->__isInitialized__ === false) {
            return  parent::getEventUri();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventUri', []);

        return parent::getEventUri();
    }

    /**
     * {@inheritDoc}
     */
    public function setEventUid($eventUid): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\ProjectEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEventUid', [$eventUid]);

        return parent::setEventUid($eventUid);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventUid(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventUid', []);

        return parent::getEventUid();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type = NULL): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\ProjectEvent
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType(): ?\OCA\CAFEVDB\Database\Doctrine\DBAL\Types\EnumVCalendarType
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists(mixed $offset): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$offset]);

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet(mixed $offset): mixed
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$offset]);

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$offset, $value]);

        parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset(mixed $offset): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$offset]);

        parent::offsetUnset($offset);
    }

}
