<?php

namespace OCA\CAFEVDB\Database\Doctrine\ORM\Proxies\__CG__\OCA\CAFEVDB\Database\Doctrine\ORM\Entities;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class DatabaseStorageFolder extends \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder implements \OCA\CAFEVDB\Wrapped\Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'directoryEntries', 'id', 'name', 'parent', 'updated', 'created'];
        }

        return ['__isInitialized__', 'directoryEntries', 'id', 'name', 'parent', 'updated', 'created'];
    }

    /**
     * {@inheritDoc}
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (DatabaseStorageFolder $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
        parent::__wakeup();
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function addDirEntry(\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry $dirEntry): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDirEntry', [$dirEntry]);

        return parent::addDirEntry($dirEntry);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDirEntry(\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry $dirEntry): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDirEntry', [$dirEntry]);

        return parent::removeDirEntry($dirEntry);
    }

    /**
     * {@inheritDoc}
     */
    public function addSubFolder(string $name): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSubFolder', [$name]);

        return parent::addSubFolder($name);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSubFolder(string $name): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSubFolder', [$name]);

        return parent::removeSubFolder($name);
    }

    /**
     * {@inheritDoc}
     */
    public function addDocument(\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\EncryptedFile $file, string $fileName = NULL, bool $replace = false): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addDocument', [$file, $fileName, $replace]);

        return parent::addDocument($file, $fileName, $replace);
    }

    /**
     * {@inheritDoc}
     */
    public function replaceDocument(\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\EncryptedFile $file, string $fileName = NULL): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'replaceDocument', [$file, $fileName]);

        return parent::replaceDocument($file, $fileName);
    }

    /**
     * {@inheritDoc}
     */
    public function removeDocument(\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\EncryptedFile $file, string $fileName = NULL): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeDocument', [$file, $fileName]);

        return parent::removeDocument($file, $fileName);
    }

    /**
     * {@inheritDoc}
     */
    public function getDocuments(): \OCA\CAFEVDB\Wrapped\Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDocuments', []);

        return parent::getDocuments();
    }

    /**
     * {@inheritDoc}
     */
    public function getSubFolders(): \OCA\CAFEVDB\Wrapped\Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubFolders', []);

        return parent::getSubFolders();
    }

    /**
     * {@inheritDoc}
     */
    public function getDirectoryEntries(): \OCA\CAFEVDB\Wrapped\Doctrine\Common\Collections\Collection
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDirectoryEntries', []);

        return parent::getDirectoryEntries();
    }

    /**
     * {@inheritDoc}
     */
    public function setDirectoryEntries(\OCA\CAFEVDB\Wrapped\Doctrine\Common\Collections\Collection $directoryEntries): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDirectoryEntries', [$directoryEntries]);

        return parent::setDirectoryEntries($directoryEntries);
    }

    /**
     * {@inheritDoc}
     */
    public function getEntryByName(string $name): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEntryByName', [$name]);

        return parent::getEntryByName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getFileByName(string $name): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFile
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFileByName', [$name]);

        return parent::getFileByName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getFolderByName(string $name): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFolderByName', [$name]);

        return parent::getFolderByName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function isEmpty(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isEmpty', []);

        return parent::isEmpty();
    }

    /**
     * {@inheritDoc}
     */
    public function getId(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId(?int $id): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(?string $name): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent(): ?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent(?\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder $parent): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function link(\OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder $parent): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'link', [$parent]);

        return parent::link($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function unlink(): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageDirEntry
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'unlink', []);

        return parent::unlink();
    }

    /**
     * {@inheritDoc}
     */
    public function getPathName(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPathName', []);

        return parent::getPathName();
    }

    /**
     * {@inheritDoc}
     */
    public function getRoot(): \OCA\CAFEVDB\Database\Doctrine\ORM\Entities\DatabaseStorageFolder
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoot', []);

        return parent::getRoot();
    }

    /**
     * {@inheritDoc}
     */
    public function isRootFolder(): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isRootFolder', []);

        return parent::isRootFolder();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString(): string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function toArray(): array
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toArray', []);

        return parent::toArray();
    }

    /**
     * {@inheritDoc}
     */
    public function offsetExists(mixed $offset): bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetExists', [$offset]);

        return parent::offsetExists($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetGet(mixed $offset): mixed
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetGet', [$offset]);

        return parent::offsetGet($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetSet', [$offset, $value]);

        parent::offsetSet($offset, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function offsetUnset(mixed $offset): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'offsetUnset', [$offset]);

        parent::offsetUnset($offset);
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated(): ?\DateTimeInterface
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

}
