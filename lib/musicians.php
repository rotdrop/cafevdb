<?php
/* Orchestra member, musician and project management application.
 *
 * CAFEVDB -- Camerata Academica Freiburg e.V. DataBase.
 *
 * @author Claus-Justus Heine
 * @copyright 2011-2014 Claus-Justus Heine <himself@claus-justus-heine.de>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU GENERAL PUBLIC LICENSE
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU AFFERO GENERAL PUBLIC LICENSE for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

/**CamerataDB namespace to prevent name-collisions.
 */
namespace CAFEVDB
{

/**Display all or selected musicians.
 */
class Musicians
  extends Instrumentation
{
  const CSS_PREFIX = 'cafevdb-page';
  private $projectMode;

  function __construct($mode = false, $execute = true) {
    parent::__construct($execute);
    $this->projectMode = $mode;
  }

  public function shortTitle()
  {
    if (!$this->projectMode) {
      return L::t('Overview over all registered musicians');
    } else {
      return L::t("Add musicians to the project `%s'", array($this->project)); 
    }
  }

  public function headerText()
  {
    $header = $this->shortTitle();
    if ($this->projectMode) {
      $header .= "
<p>
This page is the only way to add musicians to projects in order to
make sure that the musicians are also automatically added to the
`global' musicians data-base (and not only to the project).";
    }

    return '<div class="'.self::CSS_PREFIX.'-header-text">'.$header.'</div>';
  }

  /**Display the list of all musicians. If $projectMode == true,
   * filter out all musicians present in $projectId and add a
   * hyperlink which will add the Musician to the respective project.
   */
  public function display()
  {
    global $debug_query;
    $debug_query = Util::debugMode('query');

    $template        = $this->template;
    $projectName     = $this->project;
    $project         = $projectName;
    $projectId       = $this->projectId;
    $recordsPerPage  = $this->recordsPerPage;
    $opts            = $this->opts;

    $headervisibility = Util::cgiValue('headervisibility','expanded');

    /*
     * IMPORTANT NOTE: This generated file contains only a subset of huge amount
     * of options that can be used with phpMyEdit. To get information about all
     * features offered by phpMyEdit, check official documentation. It is available
     * online and also for download on phpMyEdit project management page:
     *
     * http://platon.sk/projects/main_page.php?project_id=5
     *
     * This file was generated by:
     *
     *                    phpMyEdit version: 5.7.1
     *       phpMyEdit.class.php core class: 1.204
     *            phpMyEditSetup.php script: 1.50
     *              generating setup script: 1.50
     */

    $opts['tb'] = 'Musiker';

    // Number of records to display on the screen
    // Value of -1 lists all records in a table
    $opts['inc'] = $recordsPerPage;

    $opts['cgi']['persist'] = array(
      'Project' => $project,
      'ProjectId' => $projectId,
      'Template' => $this->projectMode
      ? 'add-musicians' : 'all-musicians',
      'Table' => $opts['tb'],
      'DisplayClass' => 'Musicians',
      'ClassArguments' => array($this->projectMode),
      'headervisibility' => $headervisibility);

    if ($this->projectMode) {
      $opts['cgi']['append'][Config::$pmeopts['cgi']['prefix']['sys'].'fl'] = 1;
      $opts['cgi']['overwrite'][Config::$pmeopts['cgi']['prefix']['sys'].'fl'] = 1;
    }

    // Name of field which is the unique key
    $opts['key'] = 'Id';

    // Type of key field (int/real/string/date etc.)
    $opts['key_type'] = 'int';

    // Sorting field(s)
    $opts['sort_field'] = array('Instrumente','Name','Vorname','Id');

    // Options you wish to give the users
    // A - add,  C - change, P - copy, V - view, D - delete,
    // F - filter, I - initial sort suppressed
    $opts['options'] = 'ACPVDFM';

    // Number of lines to display on multiple selection filters
    $opts['multiple'] = '5';

    // Navigation style: B - buttons (default), T - text links, G - graphic links
    // Buttons position: U - up, D - down (default)
    //$opts['navigation'] = 'DB';

    if (!$this->projectMode) {
      $export = Navigation::tableExportButton();
      $opts['buttons'] = Navigation::prependTableButton($export, true);
    }

    // Display special page elements
    $opts['display'] =  array_merge($opts['display'],
                                    array(
                                      'form'  => true,
                                      'query' => true,
                                      'sort'  => true,
                                      'time'  => true,
                                      'tabs'  => true
                                      ));

    // Set default prefixes for variables
    $opts['js']['prefix']               = 'PME_js_';
    $opts['dhtml']['prefix']            = 'PME_dhtml_';
    $opts['cgi']['prefix']['operation'] = 'PME_op_';
    $opts['cgi']['prefix']['sys']       = 'PME_sys_';
    $opts['cgi']['prefix']['data']      = 'PME_data_';

    /* Get the user's default language and use it if possible or you can
       specify particular one you want to use. Refer to official documentation
       for list of available languages. */
    //  $opts['language'] = $_SERVER['HTTP_ACCEPT_LANGUAGE'] . '-UTF8';

    /* Table-level filter capability. If set, it is included in the WHERE clause
       of any generated SELECT statement in SQL query. This gives you ability to
       work only with subset of data from table.

       $opts['filters'] = "column1 like '%11%' AND column2<17";
       $opts['filters'] = "section_id = 9";
       $opts['filters'] = "PMEtable0.sessions_count > 200";
    */

    if ($this->projectMode) {
      $opts['filters'] = "(SELECT COUNT(*) FROM `Besetzungen` WHERE MusikerId = PMEtable0.Id AND ProjektId = $projectId) = 0";
      $opts['misccssclass']   = 'bulkcommit';
      $opts['labels']['Misc'] = strval(L::t('Add all to %s', array($project)));
    }

    /* Field definitions
   
       Fields will be displayed left to right on the screen in the order in which they
       appear in generated list. Here are some most used field options documented.

       ['name'] is the title used for column headings, etc.;
       ['maxlen'] maximum length to display add/edit/search input boxes
       ['trimlen'] maximum length of string content to display in row listing
       ['width'] is an optional display width specification for the column
       e.g.  ['width'] = '100px';
       ['mask'] a string that is used by sprintf() to format field output
       ['sort'] true or false; means the users may sort the display on this column
       ['strip_tags'] true or false; whether to strip tags from content
       ['nowrap'] true or false; whether this field should get a NOWRAP
       ['select'] T - text, N - numeric, D - drop-down, M - multiple selection
       ['options'] optional parameter to control whether a field is displayed
       L - list, F - filter, A - add, C - change, P - copy, D - delete, V - view
       Another flags are:
       R - indicates that a field is read only
       W - indicates that a field is a password field
       H - indicates that a field is to be hidden and marked as hidden
       ['URL'] is used to make a field 'clickable' in the display
       e.g.: 'mailto:$value', 'http://$value' or '$page?stuff';
       ['URLtarget']  HTML target link specification (for example: _blank)
       ['textarea']['rows'] and/or ['textarea']['cols']
       specifies a textarea is to be used to give multi-line input
       e.g. ['textarea']['rows'] = 5; ['textarea']['cols'] = 10
       ['values'] restricts user input to the specified constants,
       e.g. ['values'] = array('A','B','C') or ['values'] = range(1,99)
       ['values']['table'] and ['values']['column'] restricts user input
       to the values found in the specified column of another table
       ['values']['description'] = 'desc_column'
       The optional ['values']['description'] field allows the value(s) displayed
       to the user to be different to those in the ['values']['column'] field.
       This is useful for giving more meaning to column values. Multiple
       descriptions fields are also possible. Check documentation for this.
    */

    $opts['fdd']['Id'] = array(
      'name'     => 'Id',
      'select'   => 'T',
      'options'  => 'AVCPDR', // auto increment
      'maxlen'   => 5,
      'align'    => 'right',
      'default'  => '0',
      'sort'     => true
      );

    $bval = strval(L::t('Add to %s', array($project)));
    $tip  = strval(Config::toolTips('register-musician'));
    if ($this->projectMode) {
      $opts['fdd']['Hinzufuegen'] = array(
        'name' => 'Hinzuf&uuml;gen',
        'select' => 'T',
        'options' => 'VLR',
        'input' => 'V',
        'sql' => "REPLACE('"
."<div class=\"register-musician\">"
."<input type=\"button\" "
."value=\"$bval\" "
."data-musician-id=\"@@key@@\" "
."title=\"$tip\" "
."name=\""
."Template=bulk-add-musicians&amp;"
."headervisibility=$headervisibility&amp;"
."Project=$project&amp;"
."ProjectId=$projectId&amp;"
.Config::$pmeopts['cgi']['prefix']['sys']."operation=".rawurlencode($opts['labels']['Misc'])."&amp;"
.Config::$pmeopts['cgi']['prefix']['sys']."mrecs[]=@@key@@\" "
."class=\"register-musician\" />"
."</div>'"
.",'@@key@@',`PMEtable0`.`Id`)",
        'escape' => false,
        'nowrap' => true,
        'sort' =>false
        //'php' => "AddMusician.php"
        );
    }
    $opts['fdd']['Instrumente'] = array(
                                        'name'        => 'Instrumente',
                                        'css'         => array('postfix' => 'instruments'),
                                        'select'      => 'M',
                                        'maxlen'      => 137,
                                        'sort'        => true,
                                        'values'      => $this->instruments,
                                        'valueGroups' => $this->groupedInstruments,
      );
    $opts['fdd']['Name'] = array(
                                 'name'     => 'Name',
                                 'select'   => 'T',
                                 'maxlen'   => 128,
                                 'sort'     => true
                                 );
    $opts['fdd']['Vorname'] = array(
                                    'name'     => 'Vorname',
                                    'select'   => 'T',
                                    'maxlen'   => 128,
                                    'sort'     => true
                                    );

    /* Make "Status" a set, 'soloist','conductor','noemail', where in
     * general the first two imply the last.
     */
    $opts['fdd']['MemberStatus'] = array('name'    => strval(L::t('Member Status')),
                                         'select'  => 'D',
                                         'maxlen'  => 128,
                                         'sort'    => true,
                                         'css'     => array('postfix' => 'memberstatus'),
                                         'values2' => $this->memberStatusNames,
                                         'tooltip' => config::toolTips('member-status'));

    // fetch the list of all projects in order to provide a somewhat
    // cooked filter list
    $allProjects = Projects::fetchProjects(false /* no db handle */, true /* include years */);
    $projectQueryValues = array('*' => '*'); // catch-all filter
    $projectQueryValues[''] = L::t('no projects yet');
    foreach ($allProjects as $proj) {
      $projectQueryValues[$proj['Name']] = $proj['Jahr'].': '.$proj['Name'];      
    }

    $derivedtable =<<<__EOT__
SELECT MusikerId,GROUP_CONCAT(DISTINCT Projekte.Name ORDER BY Projekte.Name ASC SEPARATOR ',') AS Projekte FROM
Besetzungen
LEFT JOIN Projekte ON Projekte.Id = Besetzungen.ProjektId
GROUP BY MusikerId
__EOT__;

    $projectIdx = count($opts['fdd']);
    if (false && $this->projectMode) {
      $pfx = Config::$pmeopts['cgi']['prefix']['sys'];
      $key = 'qf'.$projectIdx;
      $opts['cgi']['append'][$pfx.$key.'_id'] = array($projectName);
      $opts['cgi']['append'][$pfx.$key.'_comp'] = 'not';
    }
    $opts['fdd']['Projekte'] =
      array('input' => 'VR', // virtual, read perm
            'options' => 'LFV', //just do the join, don't display anything
            'select' => 'M',
            'name' => L::t('Projects'),
            'sort' => true,
            'sql' => 'PMEjoin'.count($opts['fdd']).'.Projekte',
            'sqlw' => 'PMEjoin'.count($opts['fdd']).'.Projekte',
            'css'      => array('postfix' => 'projects'),
            'values' => array( //API for currently making a join in PME.
              'table' =>
              array('sql' => $derivedtable,
                    'kind' => 'derived'),
              'column' => 'MusikerId',
              'join' => '$main_table.Id = $join_table.MusikerId',
              'description' => 'Projekte',
              'queryvalues' => $projectQueryValues
              ),
        );

    $opts['fdd']['Strasse'] = array(
                                    'name'     => 'Strasse',
                                    'select'   => 'T',
                                    'maxlen'   => 128,
                                    'sort'     => true
                                    );
    $opts['fdd']['Postleitzahl'] = array(
                                         'name'     => 'Postleitzahl',
                                         'select'   => 'T',
                                         'maxlen'   => 11,
                                         'sort'     => true
                                         );
    $opts['fdd']['Stadt'] = array(
                                  'name'     => 'Stadt',
                                  'select'   => 'T',
                                  'maxlen'   => 128,
                                  'sort'     => true
                                  );
    $opts['fdd']['Land'] = array('name'     => 'Land',
                                 'select'   => 'T',
                                 'maxlen'   => 128,
                                 'default'  => 'Deutschland',
                                 'sort'     => true);
    $opts['fdd']['Telefon'] = array(
                                    'name'     => 'Telefon',
                                    'select'   => 'T',
                                    'maxlen'   => 128,
                                    'sort'     => true
                                    );
    $opts['fdd']['Telefon2'] = array(
                                     'name'     => 'Telefon2',
                                     'select'   => 'T',
                                     'maxlen'   => 128,
                                     'sort'     => true
                                     );
    $opts['fdd']['Geburtstag'] = Config::$opts['birthday'];
    $opts['fdd']['Email'] = Config::$opts['email'];

    $opts['fdd']['Remarks'] = array('name'     => strval(L::t('Remarks')),
                                    'select'   => 'T',
                                    'maxlen'   => 65535,
                                    'css'      => array('postfix' => 'remarks'),
                                    'textarea' => array('css' => 'wysiwygeditor',
                                                        'rows' => 5,
                                                        'cols' => 50),
                                    'escape' => false,
                                    'sort'     => true);

    $opts['fdd']['Sprachpräferenz'] = array('name'     => 'Spachpräferenz',
                                            'select'   => 'D',
                                            'maxlen'   => 128,
                                            'default'  => 'Deutschland',
                                            'sort'     => true,
                                            'values2'   => Config::$opts['languages']);

    $opts['fdd']['Insurance'] = array(
      'input' => 'V',
      'name' => L::t('Instrument Insurance'),
      'select' => 'T',
      'options' => 'ACPDV',
      'sql' => "Id",
      'escape' => false,
      'nowrap' => true,
      'sort' =>false,
      'php' => array(
        'type' => 'function',
        'function' => 'CAFEVDB\Musicians::instrumentInsurancePME',
        'parameters' => array('headervisibility' => $headervisibility)
        )
      );

    $opts['fdd']['Portrait'] = array(
      'input' => 'V',
      'name' => L::t('Photo'),
      'select' => 'T',
      'options' => 'ACPDV',
      'sql' => 'Id',
      'php' => array(
        'type' => 'function',
        'function' => 'CAFEVDB\Musicians::portraitImageLinkPME',
        'parameters' => array()
        ),
      'css' => array('postfix' => 'photo'),
      'default' => '',
      'sort' => false);

    $opts['fdd']['Aktualisiert'] = array_merge(Config::$opts['datetime'],
                                               array("name" => L::t("Last Updated"),
                                                     "default" => date(Config::$opts['datetime']['datemask']),
                                                     "nowrap" => true,
                                                     "options" => 'LFAVCPDR' // Set by update trigger.
                                                 ));

    $opts['triggers']['update']['before'] = array();
    $opts['triggers']['update']['before'][]  = 'CAFEVDB\Util::beforeUpdateRemoveUnchanged';
    $opts['triggers']['update']['before'][]  = 'CAFEVDB\Musicians::beforeTriggerSetTimestamp';

    $opts['triggers']['insert']['before'] = array();
    $opts['triggers']['insert']['before'][]  = 'CAFEVDB\Musicians::beforeTriggerSetTimestamp';

    if ($this->pme_bare) {
      // disable all navigation buttons, probably for html export
      $opts['navigation'] = 'N'; // no navigation
      $opts['options'] = '';
      // Don't display special page elements
      $opts['display'] =  array_merge($opts['display'],
                                      array(
                                        'form'  => false,
                                        'query' => false,
                                        'sort'  => false,
                                        'time'  => false,
                                        'tabs'  => false
                                        ));
      // Disable sorting buttons
      foreach ($opts['fdd'] as $key => $value) {
        $opts['fdd'][$key]['sort'] = false;
      }
    }

    $opts['execute'] = $this->execute;

    $this->pme = new \phpMyEdit($opts);

    if ($this->execute) {
      // Photo upload support:
      echo '
<form class="float"
      id="file_upload_form"
      action="'.\OCP\Util::linkTo('cafevdb', 'ajax/inlineimage/uploadimage.php').'" 
      method="post"
      enctype="multipart/form-data"
      target="file_upload_target">
  <input type="hidden" name="requesttoken" value="'.\OCP\Util::callRegister().'">
  <input type="hidden" name="RecordId" value="'.Util::getCGIRecordId().'">
  <input type="hidden" name="ImagePHPClass" value="CAFEVDB\Musicians">
  <input type="hidden" name="ImageSize" value="1200"> 
  <input type="hidden" name="MAX_FILE_SIZE" value="'.Util::maxUploadSize().'" id="max_upload">
  <input type="hidden" class="max_human_file_size" value="max '.\OCP\Util::humanFileSize(Util::maxUploadSize()).'">
  <input id="file_upload_start" type="file" accept="image/*" name="imagefile" />
</form>

<div id="edit_photo_dialog" title="Edit photo">
		<div id="edit_photo_dialog_img"></div>
</div>
';
    }

    if (Util::debugMode('request')) {
      echo '<PRE>';
      print_r($_POST);
      echo '</PRE>';
    }
    
  } // display()

  /** phpMyEdit calls the trigger (callback) with the following arguments:
   *
   * @param[in] $pme The phpMyEdit instance
   *
   * @param[in] $op The operation, 'insert', 'update' etc.
   *
   * @param[in] $step 'before' or 'after'
   *
   * @param[in] $oldvals Self-explanatory.
   *
   * @param[in,out] &$changed Set of changed fields, may be modified by the callback.
   *
   * @param[in,out] &$newvals Set of new values, which may also be modified.
   *
   * @return boolean. If returning @c false the operation will be terminated
   */
  public static function beforeTriggerSetTimestamp($pme, $op, $step, $oldvals, &$changed, &$newvals)
  {
    if (count($changed) > 0) {
      $key = 'Aktualisiert';
      $changed[] = $key;
      $newvals[$key] = date(\CAFEVDB\mySQL::DATEMASK);
    }
    echo '<!-- '.print_r($newvals, true).'-->';
    return true;
  }

  public static function instrumentInsurancePME($musicianId, $opts, $action, $k, $fds, $fdd, $row)
  {
    return self::instrumentInsurance($musicianId, $opts);
  }

  public static function instrumentInsurance($musicianId, $opts)
  {
    $headervisibility = $opts['headervisibility'];
    $amount = InstrumentInsurance::insuranceAmount($musicianId);
    $fee    = InstrumentInsurance::annualFee($musicianId);
    $bval = L::t('Total Amount %02.02f &euro;, Annual Fee %02.02f &euro;',
                 array($amount, $fee));
    $tip = strval(Config::toolTips('musician-instrument-insurance'));
    $button = "<div class=\"musician-instrument-insurance\">"
      ."<input type=\"button\" "
      ."value=\"$bval\" "
      ."title=\"$tip\" "
      ."name=\""
      ."Template=instrument-insurance&amp;"
      ."headervisibility=$headervisibility&amp;"
      ."MusicianId=".$musicianId."\" "
      ."class=\"musician-instrument-insurance\" />"
      ."</div>";
    return $button;
  }
  
  public static function portraitImageLinkPME($musicianId, $opts, $action, $k, $fds, $fdd, $row)
  {
    return self::portraitImageLink($musicianId, $action);
  }

  public static function portraitImageLink($musicianId, $action = 'display')
  {
    switch ($action) {
    case 'add':
      return L::t("Portraits or Avatars can only be added to an existing musician's profile; please add the new musician without protrait image first.");
    case 'display':
      $div = ''
        .'<div class="photo"><img class="cafevdb_inline_image portrait" src="'
        .\OCP\UTIL::linkTo('cafevdb', 'inlineimage.php').'?RecordId='.$musicianId.'&ImagePHPClass=CAFEVDB\Musicians&ImageSize=1200'
        .'" '
        .'title="Photo, if available" /></div>';
      return $div;
    case 'change':
      $photoarea = ''
        .'<div id="contact_photo">
        
  <iframe name="file_upload_target" id=\'file_upload_target\' src=""></iframe>
  <div class="tip portrait propertycontainer" id="cafevdb_inline_image_wrapper" title="'
      .L::t("Drop photo to upload (max %s)", array(\OCP\Util::humanFileSize(Util::maxUploadSize()))).'"'
        .' data-element="PHOTO">
    <ul id="phototools" class="transparent hidden contacts_property">
      <li><a class="svg delete" title="'.L::t("Delete current photo").'"></a></li>
      <li><a class="svg edit" title="'.L::t("Edit current photo").'"></a></li>
      <li><a class="svg upload" title="'.L::t("Upload new photo").'"></a></li>
      <li><a class="svg cloud icon-cloud" title="'.L::t("Select photo from ownCloud").'"></a></li>
    </ul>
  </div>
</div> <!-- contact_photo -->
';

      return $photoarea;
    default:
      return L::t("Internal error, don't know what to do concerning portrait images in the given context.");
    }
  }

  public static function imagePlaceHolder()
  {
    // could probably also check for browser support for svg here
    return 'person_large.png';
  }


  public static function fetchImage($musicianId, $handle = false)
  {
    $photo = '';

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "SELECT `PhotoData` FROM `MemberPortraits` WHERE `MemberId` = ".$musicianId;

    $result = mySQL::query($query, $handle);

    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
      if (isset($row['PhotoData'])) {
        $photo = $row['PhotoData'];
      }
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $photo;    
  }

  /**Take a BASE64 encoded photo and store it in the DB.
   */
  public static function storeImage($musicianId, $photo, $handle = false)
  { 
    if (!isset($photo) || $photo == '') {
      return;
    }

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = "INSERT INTO `MemberPortraits`
  (`MemberId`,`PhotoData`) VALUES (".$musicianId.",'".$photo."')
  ON DUPLICATE KEY UPDATE `PhotoData` = '".$photo."';";

    $result = mySQL::query($query, $handle) && self::storeModified($musicianId, $handle);
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  public static function deleteImage($musicianId, $handle = false)
  {
    $photo = '';

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "DELETE IGNORE FROM `MemberPortraits` WHERE `MemberId` = ".$musicianId;

    $result = mySQL::query($query, $handle) && self::storeModified($musicianId, $handle);

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  public static function storeModified($musicianId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "UPDATE IGNORE `Musiker`
    SET `Aktualisiert` = '".date(mySQL::DATEMASK)."'
    WHERE `Id` = ".$musicianId;

    $result = mySQL::query($query, $handle);
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  public static function fetchModified($musicianId, $handle = false)
  {
    $modified = 0;

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "SELECT `Aktualisiert` FROM `Musiker` WHERE `Id` = ".$musicianId.";";

    $result = mySQL::query($query, $handle);
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
      if (isset($row['Aktualisiert'])) {
        $modified = strtotime($row['Aktualisiert']);
      }
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $modified;
  }

  /**Fetch all known data from the Musiker table for the respective musician.  */
  public static function fetchMusicianPersonalData($musicianId, $handle = false)
  {
    $ownConnection = $handle === false;

    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = "SELECT * FROM `Musiker` WHERE `Id` = $musicianId";

    $result = mySQL::query($query, $handle);
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
    } else {
      $row = false;
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $row;
  }

  /**In principle a musician can have multiple entries per
   * project. Unique is only the combination
   * project-musician-instrument-position. In principle, if a musician
   * plays more than one instrument in different pieces in a project,
   * he or she could be listed twice.
   */
  public static function fetchMusicianProjectData($musicianId, $projectId, $handle = false)
  {
    $ownConnection = $handle === false;

    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = " SELECT *
 FROM `Besetzungen`
     WHERE `Besetzungen`.`MusikerId` = $musicianId
       AND `Besetzungen`.`ProjektId` = $projectId";

    $result = mySQL::query($query, $handle);
    if ($result !== false) {
      $rows = array();
      while ($row = mySQL::fetch($result)) {
        $rows[] = $row;
      }
    } else {
      $rows = false;
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $rows;
  }

  /** Fetch the musician-name name corresponding to $musicianId.
   */
  public static function fetchName($musicianId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = 'SELECT `Name`,`Vorname` FROM `Musiker` WHERE `Id` = '.$musicianId;
    $result = mySQL::query($query, $handle);

    $row = false;
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return array('firstName' => isset($row['Vorname']) ? $row['Vorname'] : 'X',
                 'lastName' => isset($row['Name']) ? $row['Name'] : 'X');
  }
  
};

/**Class responsible for adding multiple musicians to a project. In
 * principle the layout of the table is the same as the one for the
 * "brief instrumentation"
 */
class BulkAddMusicians
  extends Instrumentation
{
  const CSS_PREFIX = 'cafevdb-page';
  const INITIAL_TEMPLATE = 'bulk-add-musicians';
  const CHANGE_TEMPLATE = 'bulk-change-musicians';

  private $musiciansIds;
  private $musicansKey;

  function __construct($execute = true) {
    parent::__construct($execute);
    $this->musiciansIds = array();
    $pmepfx             = $this->opts['cgi']['prefix']['sys'];
    $this->musiciansKey = $pmepfx.'mrecs';
  }

  public function shortTitle()
  {
    return L::t("New Musicians for Project `%s'.", array($this->project));
  }

  public function headerText()
  {

    $header = <<<__EOT__
<H2>
  Auf dieser Seite werden <B>nur</B> die neuen Musiker f&uuml;r das Projekt angezeigt,
  f&uuml;r die komplette List mu&szlig; man den entsprechenden Button bet&auml;tigen.
</H2>

__EOT__;

    return $header;
  }

  private function sqlFilter($table = 'PMEtable0') {
    $filter = "`".$table."`.ProjektId = ".$this->projectId." AND ( `".$table."`.MusikerId = -1";
    foreach ($this->musiciansIds as $musId) {
      $filter .= " OR `".$table."`.MusikerId = ".$musId;
    }
    $filter .= ")"; // don't forget the closing parenthesis.
    return $filter;
  }

  /**Helper method to add or change multiple musicians to an
   * existing project.
   */
  public function display()
  {
    global $debug_query;
    $debug_query = Util::debugMode('query');

    $project         = $this->project;
    $projectId       = $this->projectId;
    $opts            = $this->opts;
    $recordsPerPage  = $this->recordsPerPage;
    $userExtraFields = $this->userExtraFields;

    $headervisibility = Util::cgiValue('headervisibility', 'expanded');

    $saved_template = $this->template;
    $this->template = self::CHANGE_TEMPLATE;

    $this->musiciansIds  = Util::cgiValue($this->musiciansKey, array());
    $numRecords = count($this->musiciansIds);
    $sort = false && $numRecords > 6;
    $query = false && $numRecords > 6;

    // Probably needs several changes ...
    if (isset($_POST['ForcedInstrument'])) {
      $forcedInstrument = $_POST['ForcedInstrument'];
    } else {
      $forcedInstrument = false;
    }

    if (Util::debugMode('request')) {
      echo '<PRE>';
      print_r($_POST);
      echo '</PRE>';
    }

    /*
     * IMPORTANT NOTE: This generated file contains only a subset of huge amount
     * of options that can be used with phpMyEdit. To get information about all
     * features offered by phpMyEdit, check official documentation. It is available
     * online and also for download on phpMyEdit project management page:
     *
     * http://platon.sk/projects/main_page.php?project_id=5
     *
     * This file was generated by:
     *
     *                    phpMyEdit version: 5.7.1
     *       phpMyEdit.class.php core class: 1.204
     *            phpMyEditSetup.php script: 1.50
     *              generating setup script: 1.50
     */

    $opts['tb'] = 'Besetzungen';

    // Number of records to display on the screen
    // Value of -1 lists all records in a table
    $opts['inc'] = $recordsPerPage;

    // Don't want everything persistent.
    $opts['cgi']['persist'] = array(
      'Project' => $this->project,
      'ProjectId' => $this->projectId,
      'Table' => $opts['tb'],
      'Template' => $this->template,
      'RecordsPerPage' => $recordsPerPage,
      'DisplayClass' => 'BulkAddMusicians',
      $this->musiciansKey => $this->musiciansIds,
      'headervisibility' => $headervisibility);

    // Name of field which is the unique key
    $opts['key'] = 'Id';

    // Type of key field (int/real/string/date etc.)
    $opts['key_type'] = 'int';

    // Sorting field(s)
    $opts['sort_field'] = array('Sortierung','Reihung','-Stimmführer','MusikerId');

    // Options you wish to give the users
    // A - add,  C - change, P - copy, V - view, D - delete,
    // F - filter, I - initial sort suppressed
    $opts['options'] = 'CVD';
    if ($numRecords > 6) {
      $opts['options'] .= 'F';
    }

    // Number of lines to display on multiple selection filters
    $opts['multiple'] = '4';

    // Navigation style: B - buttons (default), T - text links, G - graphic links
    // Buttons position: U - up, D - down (default)
    //$opts['navigation'] = 'DB';

    // Display special page elements
    $opts['display'] =  array_merge($opts['display'],
                                    array(
                                      'form'  => true,
                                      'query' => $query,
                                      'sort'  => $sort,
                                      'time'  => true,
                                      'tabs'  => false
                                      ));

    /* Get the user's default language and use it if possible or you can
       specify particular one you want to use. Refer to official documentation
       for list of available languages. */
    //  $opts['language'] = $_SERVER['HTTP_ACCEPT_LANGUAGE'] . '-UTF8';

    /* Table-level filter capability. If set, it is included in the WHERE clause
       of any generated SELECT statement in SQL query. This gives you ability to
       work only with subset of data from table.

       $opts['filters'] = "column1 like '%11%' AND column2<17";
       $opts['filters'] = "section_id = 9";
       $opts['filters'] = "PMEtable0.sessions_count > 200";
    */

    $opts['filters'] = $this->sqlFilter('PMEtable0');


    /* Field definitions
   
       Fields will be displayed left to right on the screen in the order in which they
       appear in generated list. Here are some most used field options documented.

       ['name'] is the title used for column headings, etc.;
       ['maxlen'] maximum length to display add/edit/search input boxes
       ['trimlen'] maximum length of string content to display in row listing
       ['width'] is an optional display width specification for the column
       e.g.  ['width'] = '100px';
       ['mask'] a string that is used by sprintf() to format field output
       ['sort'] true or false; means the users may sort the display on this column
       ['strip_tags'] true or false; whether to strip tags from content
       ['nowrap'] true or false; whether this field should get a NOWRAP
       ['select'] T - text, N - numeric, D - drop-down, M - multiple selection
       ['options'] optional parameter to control whether a field is displayed
       L - list, F - filter, A - add, C - change, P - copy, D - delete, V - view
       Another flags are:
       R - indicates that a field is read only
       W - indicates that a field is a password field
       H - indicates that a field is to be hidden and marked as hidden
       ['URL'] is used to make a field 'clickable' in the display
       e.g.: 'mailto:$value', 'http://$value' or '$page?stuff';
       ['URLtarget']  HTML target link specification (for example: _blank)
       ['textarea']['rows'] and/or ['textarea']['cols']
       specifies a textarea is to be used to give multi-line input
       e.g. ['textarea']['rows'] = 5; ['textarea']['cols'] = 10
       ['values'] restricts user input to the specified constants,
       e.g. ['values'] = array('A','B','C') or ['values'] = range(1,99)
       ['values']['table'] and ['values']['column'] restricts user input
       to the values found in the specified column of another table
       ['values']['description'] = 'desc_column'
       The optional ['values']['description'] field allows the value(s) displayed
       to the user to be different to those in the ['values']['column'] field.
       This is useful for giving more meaning to column values. Multiple
       descriptions fields are also possible. Check documentation for this.
    */

    $opts['fdd']['Id'] = array(
                               'name'     => 'Id',
                               'select'   => 'T',
                               'options'  => 'AVCPDR', // auto increment
                               'maxlen'   => 11,
                               'default'  => '0',
                               'sort'     => $sort
                               );
    $opts['fdd']['ProjektId'] = array(
                                      'name'     => 'ProjektId',
                                      'select'   => 'T',
                                      'options'  => 'AVCPDR', // auto increment
                                      'maxlen'   => 11,
                                      'sort'     => $sort,
                                      'values' => array(
                                                        'table' => 'Projekte',
                                                        'column' => 'Id',
                                                        'description' => 'Name',
                                                        'filters' => "Id = $this->projectId"
                                                        )
                                      );

    $musIdx = 2;    
    $opts['fdd']['MusikerId'] = array(
                                      'name'     => 'MusikerId',
                                      'input'    => 'R',
                                      'select'   => 'T',
                                      'maxlen'   => 11,
                                      'sort'     => $sort,
                                      //'options'  => 'LFADV', // no change allowed
                                      'values' => array('table' => 'Musiker',
                                                        'column' => 'Id',
                                                        'description' => array('columns' => array('Name', 'Vorname'),
                                                                               'divs' => array(', ')
                                                                               ))
                                      );

    $opts['fdd']['Anmeldung'] = $this->registrationColumn;

    $opts['fdd']['Instrument'] = array(
      'name'     => 'Instrument',
      'select'   => 'D',
      'maxlen'   => 36,
      'css'      => array('postfix' => 'instrument'),
      'sort'     => $sort,
      'values' => array(
        'table'   => 'Instrumente',
        'column'  => 'Instrument',
        'orderby' => '$table.Sortierung',
        'description' => array('columns' => array('Instrument')),
        /* This rather fancy fillter masks out all instruments
         * currently not registerd with the given musician, but allows
         * for the currently active instrument.
         */
        'filters' => ("FIND_IN_SET(`Instrument`,
  CONCAT_WS(',',(SELECT `Instrument` FROM \$main_table WHERE \$record_id = `\$main_table`.`Id`),
                (SELECT `Instrumente` FROM `Musiker`
                          LEFT JOIN `\$main_table` ON  `\$main_table`.`MusikerId` =`Musiker`.`Id`
                          WHERE \$record_id = `\$main_table`.`Id`)))"),
        ),
      'values|LF' => array(
        'table'   => 'Instrumente',
        'column'  => 'Instrument',
        'orderby' => '$table.Sortierung',
        'description' => array('columns' => array('Instrument')),
        'filters' => ("`Instrument` IN ".
                      "(SELECT `Instrument` FROM \$main_table WHERE `ProjektId` = $projectId)"),
        ),
      'valueGroups' => $this->groupedInstruments,
      );

    /* Give the user also the choice to alter the personal list of
     * instruments for the respective musician, we do this in the same
     * way as it is done for the project-instruments.
     */    
    $opts['fdd']['MusicianInstruments'] = array(
      'input' => 'V',
      'name' => L::t('All Instruments'),
      'display' => array(
        'prefix' => ('<input style="display:none;" type="button"'.
                     '       id="add-instruments-button"'.
                     '       value="'.L::t('Change Known Instruments').'"'.
                     '       title="'.L::t('Click to change the list of instrumens the musician is capable to perform with.').'"'.
                     '       name="add-instruments" />'.
                     '<div id="add-instruments-block">'.
                     '  <input type="hidden" autofocus="autofocus" />'), // prevent auto-focus on chosen.
        'postfix' => '</div>'),
      'css' => array('postfix' => 'add-instruments'), // chosen-hidden select-hidden'),
      'options' => 'C',
      'select' => 'M',
      'sql' => '`PMEjoin'.$musIdx.'`.`Instrumente`',
      'sqlw' => '`PMEjoin'.$musIdx.'`.`Instrumente`',
      'values' => $this->instruments,
      'valueGroups' => $this->groupedInstruments
      );

    //$opts['fdd']['Instrument']['values'] = $this->instruments;
    $opts['fdd']['Sortierung'] = array('name' => 'Orchester-Sortierung',
                                       'select' => 'T',
                                       'options' => 'VCPR',
                                       'input' => 'V',
                                       'sql' => '`PMEjoin4`.`Sortierung`', // this is `Instrumente`
                                       'sort' => $sort);
    $opts['fdd']['Reihung'] = array('name' => 'Stimme',
                                    'select' => 'N',
                                    'maxlen' => '1',
                                    'sort' => $sort);
    $opts['fdd']['Stimmführer'] = $this->sectionLeaderColumn;

    $opts['fdd']['Bemerkungen'] = array('name'     => 'Bemerkungen',
                                        'select'   => 'T',
                                        'maxlen'   => 65535,
                                        'css'      => array('postfix' => 'remarks'),
                                        'textarea' => array('css' => 'wysiwygeditor',
                                                            'rows' => 5,
                                                            'cols' => 50),
                                        'escape' => false,
                                        'sort'     => $sort);
    $opts['fdd']['Unkostenbeitrag'] = Config::$opts['money'];
    $opts['fdd']['Unkostenbeitrag']['name'] = "Unkostenbeitrag\n(Gagen negativ)";

    // One virtual field in order to be able to manage SEPA debit mandas
    $opts['fdd']['SepaDebitMandate'] = array(
      'input' => 'V',
      'name' => L::t('SEPA Debit Mandate'),
      'select' => 'T',
      'options' => 'LACPDV',
      'sql' => '`PMEjoin'.count($opts['fdd']).'`.`mandateReference`', // dummy, make the SQL data base happy
      'sqlw' => '`PMEjoin'.count($opts['fdd']).'`.`mandateReference`', // dummy, make the SQL data base happy
      'values' => array(
        'table' => 'SepaDebitMandates',
        'column' => 'id',
        'join' => '$join_table.projectId = $main_table.ProjektId AND $join_table.musicianId = $main_table.MusikerId',
        'description' => 'mandateReference'
        ),
      'nowrap' => true,
      'sort' => false,
      'php' => array(
        'type' => 'function',
        'function' => 'CAFEVDB\BriefInstrumentation::sepaDebitMandatePME',
        'parameters' => array('project' => $project,
                              'projectId' => $projectId)
        )
      );

    // Generate input fields for the extra columns
    foreach ($userExtraFields as $field) {
      $name = sprintf('ExtraFeld%02d', $field['pos']);
    
      $opts['fdd']["$name"] = array('name' => $field['name'],
                                    'select'   => 'T',
                                    'maxlen'   => 65535,
                                    'textarea' => array('css' => '',
                                                        'rows' => 2,
                                                        'cols' => 32),
                                    'escape' => false,
                                    'sort'     => $sort);

      if ($field['tooltip'] !== false) {
        $opts['fdd']["$name"]['tooltip'] = $field['tooltip'];
      }
    }

    // Check whether the instrument is also mentioned in the musicians
    // data-base. Otherwise add id on request.
    $opts['triggers']['insert']['before']  = 'CAFEVDB\Instrumentation::beforeInsertFixProjectTrigger';
    $opts['triggers']['update']['before']  = 'CAFEVDB\Instrumentation::beforeUpdateInstrumentTrigger';

    if ($this->pme_bare) {
      // disable all navigation buttons, probably for html export
      $opts['navigation'] = 'N'; // no navigation
      $opts['options'] = '';
      // Don't display special page elements
      $opts['display'] =  array_merge($opts['display'],
                                      array(
                                        'form'  => false,
                                        'query' => false,
                                        'sort'  => false,
                                        'time'  => false,
                                        'tabs'  => false
                                        ));
      // Disable sorting buttons
      foreach ($opts['fdd'] as $key => $value) {
        $opts['fdd'][$key]['sort'] = false;
      }
    }

    echo "<div class=\"cafevdb-table-notes\">\n"; // notes

    if ($saved_template == self::INITIAL_TEMPLATE) {

      // Fetch all needed data from Musiker table
      $handle = mySQL::connect($opts);

      $instrumentationNoBugCount = 0;

      foreach ($this->musiciansIds as $musicianId) {

        $musquery = "SELECT `Instrumente`,`Vorname`,`Name` FROM Musiker WHERE `Id` = $musicianId";
        $musres = mySQL::query($musquery, $handle);
        $musnumrows = mysql_num_rows($musres);

        if ($musnumrows != 1) {
          Util::error("Data inconsisteny, $musicianId is not a unique Id");
        }

        $musrow = mySQL::fetch($musres);
        $instruments = explode(',',$musrow['Instrumente']);

        $instquery = "SELECT `Besetzung` FROM `Projekte` WHERE `Id` = $this->projectId";
        $instres = mySQL::query($instquery, $handle);
        $instnumrows = mysql_num_rows($instres);

        if ($instnumrows != 1) {
          Util::error("Data inconsisteny, $this->projectId is not a unique Id");
        }

        $instrow = mySQL::fetch($instres);
        $instrumentation = explode(',',$instrow['Besetzung']);

        unset($musinst);
        foreach ($instruments as $value) {
          if (array_search($value, $instrumentation) !== false) {
            // Choose $musinst as instrument
            $musinst = $value;
            break;
          }
        }
        if (!isset($musinst)) {
          // Warn.
          $warning = L::t("None of the instruments known by %s are mentioned in the "
                          ."instrumentation-list for the project. "
                          ."The musician is added nevertheless to the project with the instrument ``%s''\n"
                          ."Please correct the mis-match.",
                          array($musrow['Vorname']." ".$musrow['Name'], $instruments[0]));
          echo '<div class="cafevdb-note">'.$warning.'</div>';
          $musinst = $instruments[0];
        } else {
          $instrumentationNoBugCount++;
        }

        $prjquery = "INSERT INTO `Besetzungen` (`MusikerId`,`ProjektId`,`Instrument`)
 VALUES ('$musicianId','$this->projectId','$musinst')";

        // fire it up
        mySQL::query($prjquery, $handle);

      } // foreach over all Ids to be added

      mySQL::close($handle);

      if ($instrumentationNoBugCount > 0) {
        $note = L::t("Generally, the first instrument known by the respective musician"
                     ."and mentioned in the instrumentation list of the project `%s'"
                     ."was chosen as `project-instrument'."
                     ."Please correct that by choosing a different `project-instrument'"
                     ."below, if necessary.",
                     $this->project);
        echo '<div class="cafevdb-note">'.$note.'</div>';
      }

    } else if ($forcedInstrument != false) {
      // "call-back" mode for change trigger. The Change trigger
      // should remove any changed instrument from the table data and
      // instead pass the new intstrumentation via Javascript a an
      // AJAX call-back which handles the user's decision by a
      // separate data-query.

      // Add to musicans list in Musiker data-base and to musician Besetzungen

      // Fetch all needed data from Musiker table
      $handle = mySQL::connect($opts);

      $musquery = "SELECT `Instrumente` FROM Musiker WHERE `Id` = $musicianId";

      $musres = mySQL::query($musquery, $handle);
      $musnumrows = mysql_num_rows($musres);

      if ($musnumrows != 1) {
        die ("Data inconsisteny, $musicianId is not a unique Id");
      }

      $musrow = mySQL::fetch($musres);
      $instruments = $musrow['Instrumente'] . "," . $forcedInstrument;
    
      $musquery = "UPDATE `Musiker` SET `Instrumente`='$instruments'
 WHERE `Id` = $musicianId";
  
      mySQL::query($musquery, $handle);

      $prjquery = "UPDATE `Besetzungen` SET `Instrument`='$forcedInstrument'
 WHERE `MusikerId` = $musicianId AND `ProjektId` = $this->projectId";

      mySQL::query($prjquery, $handle);

      mySQL::close();
    }

    echo "</div>\n"; // notes

    $opts['execute'] = $this->execute;

    if ($numRecords <= 6) {
      foreach ($opts['fdd'] as $key => $value) {
        $opts['fdd'][$key]['sort'] = false;
      }
      //$opts['navigation'] = 'N'; // no navigation
    }
    
    // Generate and possibly display the table
    $this->pme = new \phpMyEdit($opts);

    if (Util::debugMode('request')) {
      echo '<PRE>';
      print_r($_POST);
      print_r($opts['cgi']['persist']);
      echo $saved_template."\n";
      echo '</PRE>';
    }

  }

}; // class definition.

}

?>
