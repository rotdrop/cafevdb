<?php
/**Orchestra member, musician and project management application.
 *
 * CAFEVDB -- Camerata Academica Freiburg e.V. DataBase.
 *
 * @author Claus-Justus Heine
 * @copyright 2011-2014 Claus-Justus Heine <himself@claus-justus-heine.de>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU GENERAL PUBLIC LICENSE
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU AFFERO GENERAL PUBLIC LICENSE for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

/**CamerataDB namespace to prevent name-collisions.
 */
namespace CAFEVDB
{

/** Helper class for displaying projects.
 */
class Projects
{
  const CSS_PREFIX = 'cafevdb-page';
  const IMAGE_PLACEHOLDER = 'flyerdummy.svg';
  private $pme;
  private $pme_bare;
  private $execute;

  public function __construct($execute = true)
  {
    $this->execute = $execute;
    $this->pme = false;
    $this->pme_bare = false;

    Config::init();
  }

  public function deactivate() 
  {
    $this->execute = false;
  }

  public function activate() 
  {
    $this->execute = true;
  }

  public function execute()
  {
    if ($this->pme) {
      $this->pme->execute();
    }
  }

  public function navigation($enable)
  {
    $this->pme_bare = !$enable;
  }

  /**Disable some extra stuff (image upload etc.) when displaying the entire table.
   */
  public function changeOperation()
  {
    if (!isset($this->pme)) {
      return false;
    } else {
      return $this->pme->change_operation() || $this->pme->add_operation();
    }
  }

  public function shortTitle()
  {
    return L::t("%s Projects", array(ucfirst(Config::getValue('orchestra'))));
  }

  public function headerText()
  {
    $header  = $this->shortTitle();
    $header .= '<p>';
    $header .= L::t("Please click on the project-name of the respective project in order to edit the instrumentation list or dates or to store other project related data.");

    return '<div class="'.self::CSS_PREFIX.'-header-text">'.$header.'</div>';
  }

  public function display()
  {
    global $debug_query;
    $debug_query = Util::debugMode('query');

    if (Util::debugMode('request')) {
      echo '<PRE>';
      /* print_r($_SERVER); */
      print_r($_POST);
      echo '</PRE>';
    }

    /*
     * IMPORTANT NOTE: This generated file contains only a subset of huge amount
     * of options that can be used with phpMyEdit. To get information about all
     * features offered by phpMyEdit, check official documentation. It is available
     * online and also for download on phpMyEdit project management page:
     *
     * http://platon.sk/projects/main_page.php?project_id=5
     *
     * This file was generated by:
     *
     *                    phpMyEdit version: 5.7.1
     *       phpMyEdit.class.php core class: 1.204
     *            phpMyEditSetup.php script: 1.50
     *              generating setup script: 1.50
     */

    // Inherit a bunch of default options
    $opts = Config::$pmeopts;

    $opts['cgi']['persist'] = array(
      'Template' => 'projects',
      'DisplayClass' => 'Projects',
      'ClassArguments' => array(),
      'app' => Util::cgiValue('app'), // ???
      'headervisibility' => Util::cgiValue('headervisibility','expanded'));

    $opts['tb'] = 'Projekte';

    // Name of field which is the unique key
    $opts['key'] = 'Id';

    // Type of key field (int/real/string/date etc.)
    $opts['key_type'] = 'int';

    // Sorting field(s)
    $opts['sort_field'] = array('Jahr', 'Id');

    // Number of records to display on the screen
    // Value of -1 lists all records in a table
    $opts['inc'] = -1;

    // Options you wish to give the users
    // A - add,  C - change, P - copy, V - view, D - delete,
    // F - filter, I - initial sort suppressed
    $opts['options'] = 'ACPVDF';

    // Number of lines to display on multiple selection filters
    $opts['multiple'] = '6';

    // Navigation style: B - buttons (default), T - text links, G - graphic links
    // Buttons position: U - up, D - down (default)
    //$opts['navigation'] = 'DB';

    // Display special page elements
    $opts['display'] =  array_merge($opts['display'],
                                    array(
                                      'form'  => true,
                                      'query' => true,
                                      'sort'  => true,
                                      'time'  => true,
                                      'tabs'  => true
                                      ));

    /* Get the user's default language and use it if possible or you can
       specify particular one you want to use. Refer to official documentation
       for list of available languages. */
    //$opts['language'] = $_SERVER['HTTP_ACCEPT_LANGUAGE']; // . '-UTF8';

    /* Table-level filter capability. If set, it is included in the WHERE clause
       of any generated SELECT statement in SQL query. This gives you ability to
       work only with subset of data from table.

       $opts['filters'] = "column1 like '%11%' AND column2<17";
       $opts['filters'] = "section_id = 9";
       $opts['filters'] = "PMEtable0.sessions_count > 200";
    */

    /* Field definitions
   
       Fields will be displayed left to right on the screen in the order in which they
       appear in generated list. Here are some most used field options documented.

       ['name'] is the title used for column headings, etc.;
       ['maxlen'] maximum length to display add/edit/search input boxes
       ['trimlen'] maximum length of string content to display in row listing
       ['width'] is an optional display width specification for the column
       e.g.  ['width'] = '100px';
       ['mask'] a string that is used by sprintf() to format field output
       ['sort'] true or false; means the users may sort the display on this column
       ['strip_tags'] true or false; whether to strip tags from content
       ['nowrap'] true or false; whether this field should get a NOWRAP
       ['select'] T - text, N - numeric, D - drop-down, M - multiple selection
       ['options'] optional parameter to control whether a field is displayed
       L - list, F - filter, A - add, C - change, P - copy, D - delete, V - view
       Another flags are:
       R - indicates that a field is read only
       W - indicates that a field is a password field
       H - indicates that a field is to be hidden and marked as hidden
       ['URL'] is used to make a field 'clickable' in the display
       e.g.: 'mailto:$value', 'http://$value' or '$page?stuff';
       ['URLtarget']  HTML target link specification (for example: _blank)
       ['textarea']['rows'] and/or ['textarea']['cols']
       specifies a textarea is to be used to give multi-line input
       e.g. ['textarea']['rows'] = 5; ['textarea']['cols'] = 10
       ['values'] restricts user input to the specified constants,
       e.g. ['values'] = array('A','B','C') or ['values'] = range(1,99)
       ['values']['table'] and ['values']['column'] restricts user input
       to the values found in the specified column of another table
       ['values']['description'] = 'desc_column'
       The optional ['values']['description'] field allows the value(s) displayed
       to the user to be different to those in the ['values']['column'] field.
       This is useful for giving more meaning to column values. Multiple
       descriptions fields are also possible. Check documentation for this.
    */

    $idIdx = 0;
    $opts['fdd']['Id'] = array(
      'name'     => 'Id',
      'select'   => 'T',
      'options'  => 'AVCPDR', // auto increment
      'maxlen'   => 11,
      'default'  => '0',
      'sort'     => true,
      );
    
    $currentYear = date('Y');
    $yearRange = self::fetchYearRange();
    $yearValues = array(' ');
    for ($year = $yearRange["min"] - 1; $year < $currentYear + 5; $year++) {
      $yearValues[] = $year;
    }

    $opts['fdd']['Jahr'] = array(
      'name'     => 'Jahr',
      'select'   => 'N',
      //'options'  => 'LAVCPDF'
      'maxlen'   => 11,
      'default'  => $currentYear,
      'sort'     => true,
      'values'   => $yearValues,
      );

    $nameIdx = count($opts['fdd']);
    $opts['fdd']['Name'] = array(
      'name'     => L::t('Projekt-Name'),
      'php|LF'  => array('type' => 'function',
                         'function' => 'CAFEVDB\Projects::projectActionsPME',
                         'parameters' => array("idIndex" => $idIdx)),
      'display|APC' => array(//"prefix" => "prefix",
                            "postfix" => '<label
  title="'.Config::toolTips("project-name-yearattach").'">
  <input type="checkbox"
         name="yearattach"
         id="project-name-yearattach"
         checked
  />
'.L::t("Append the year to the name").'
</label>'),
      'select'   => 'D',
      'maxlen'   => 64,
      'css'      => array('postfix' => 'projectname'),
      'sort'     => true,
      );

    $opts['fdd']['Actions'] = array(
      'name'     => L::t('Actions'),
      'sql'      => 'Name',
      'php|VCLDF'    => array('type' => 'function',
                              'function' => 'CAFEVDB\Projects::projectActionsPME',
                              'parameters' => array("idIndex" => $idIdx,
                                                    "placeHolder" => L::t("Actions"))),
      'select'   => 'T',
      'options'  => 'VDR',
      'maxlen'   => 11,
      'default'  => '0',
      'sort'     => false
      );

    $opts['fdd']['Programm'] = array(
      'name'     => L::t('Program'),
      'input'    => 'V',
      'options'  => 'VCDA', 
      'select'   => 'T',
      'maxlen'   => 65535,
      'css'      => array('postfix' => 'projectremarks'),
      'sql'      => 'Id',
      'sqlw'     => 'Id',
      'php|CV'    => array('type' => 'function',
                          'function' => 'CAFEVDB\Projects::projectProgramPME',
                          'parameters' => array()),
      'sort'     => true,
      'escape' => false
      );


    $handle = mySQL::connect(Config::$pmeopts);
    $groupedInstruments = Instruments::fetchGrouped($handle);
    $instruments        = Instruments::fetch($handle);
    mySQL::close($handle);

    $opts['fdd']['Besetzung'] = array('name'     => 'Besetzung',
                                      'options'  => 'LAVCPD',
                                      'select'   => 'M',
                                      'maxlen'   => 11,
                                      'sort'     => true,
                                      'display|LF' => array("prefix" => '<div class="projectinstrumentation">',
                                                            "postfix" => '</div>'),
                                      'css'      => array('postfix' => 'projectinstrumentation'),
                                      'values'   => $instruments,
                                      'valueGroups' => $groupedInstruments);

    $opts['fdd']['Bemerkungen'] = array(
      'name'     => 'Bemerkungen',
      'select'   => 'T',
      'maxlen'   => 65535,
      'css'      => array('postfix' => 'projectremarks'),
      'textarea' => array('css' => 'none', //'wysiwygeditor',
                          'rows' => 5,
                          'cols' => 50),
      'sort'     => true,
      'escape'   => false,
      'default'  => 'Kosten, Teilnahmebedingungen etc.'
      );

    $opts['fdd']['ExtraFelder'] = array('name'     => 'Extra Felder für Teilnehmer',
                                        'options'  => 'FLAVCPD',
                                        'select'   => 'T',
                                        'maxlen'   => 1024,
                                        'css'      => array('postfix' => 'projectextra'),
                                        'textarea' => array('css' => '',
                                                            'rows' => 1,
                                                            'cols' => 80),
                                        'sort'     => false,
                                        'escape'   => false,
                                        'tooltip'  => L::t('Comma separates list of extra-fields, e.g.
<blockquote>
  SingleRoom:1:TooltipSingleRoom,Fee:2:TooltipForFee
</blockquote>
or simply  
<blockquote>
  SingleRoom,Fee
</blockquote>

The number after the colon (and the colon) are optional, if present, the
number determines the mapping of the extra columns to columns of the
underlying data-base table. Internally the extra columns are simply named
"ExtraField01" etc. The display ordering of the extra columns corresponds
to the order of the fields given here (i.e. "SingleRoom" would be the displayed
left of "Fee"). If this ordering is changed, one should specify the mapping
of the fields to the data-base columns, e.g. like so:
<blockquote>
  Fee:2,SingleRoom:1
</blockquote>
This changes the displayed ordering of the columns but the mapping
to the data-base table remains consistetnt. Optionally, the string after an
optional second colon is displayed as a "tool-tip". The tool-tip must not contain
a comma.'));

    $opts['fdd']['Flyer'] = array(
      'input' => 'V',
      'name' => L::t('Flyer'),
      'select' => 'T',
      'options' => 'ACPDV',
      'sql' => 'Id',
      'php' => array(
        'type' => 'function',
        'function' => 'CAFEVDB\Projects::flyerImageLinkPME',
        'parameters' => array()
        ),
      'css' => array('postfix' => 'projectflyer'),
      'default' => '',
      'sort' => false);

    // We could try to use 'before' triggers in order to verify the
    // data. However, at the moment the stuff does not work without JS
    // anyway, and we use Ajax calls to verify the form data.

    $opts['triggers']['update']['after'] = 'CAFEVDB\Projects::afterUpdateTrigger';
    $opts['triggers']['insert']['after'] = 'CAFEVDB\Projects::afterInsertTrigger';
    $opts['triggers']['delete']['after'] = 'CAFEVDB\Projects::afterDeleteTrigger';

    $opts['execute'] = $this->execute;
    $this->pme = new \phpMyEdit($opts);

    if ($this->execute) {
      // Photo upload support:
      echo '
<form class="float"
      id="file_upload_form"
      action="'.\OCP\Util::linkTo('cafevdb', 'ajax/inlineimage/uploadimage.php').'" 
      method="post"
      enctype="multipart/form-data"
      target="file_upload_target">
  <input type="hidden" name="requesttoken" value="'.\OCP\Util::callRegister().'">
  <input type="hidden" name="RecordId" value="'.Util::getCGIRecordId().'">
  <input type="hidden" name="ImagePHPClass" value="CAFEVDB\Projects">
  <input type="hidden" name="ImageSize" value="1200"> 
  <input type="hidden" name="MAX_FILE_SIZE" value="'.Util::maxUploadSize().'" id="max_upload">
  <input type="hidden" class="max_human_file_size" value="max '.\OCP\Util::humanFileSize(Util::maxUploadSize()).'">
  <input id="file_upload_start" type="file" accept="image/*" name="imagefile" />
</form>

<div id="edit_photo_dialog" title="Edit photo">
		<div id="edit_photo_dialog_img"></div>
</div>
';
    }
  }

  /** phpMyEdit calls the trigger (callback) with the following arguments:
   *
   * @param[in] $pme The phpMyEdit instance
   *
   * @param[in] $op The operation, 'insert', 'update' etc.
   *
   * @param[in] $step 'before' or 'after'
   *
   * @param[in] $oldvals Self-explanatory.
   *
   * @param[in,out] &$changed Set of changed fields, may be modified by the callback.
   *
   * @param[in,out] &$newvals Set of new values, which may also be modified.
   *
   * @return boolean. If returning @c false the operation will be terminated
   */
  public static function afterInsertTrigger(&$pme, $op, $step, $oldvals, &$changed, &$newvals)
  {
    // $newvals contains the new values
    $projectId   = $pme->rec;
    $projectName = $newvals['Name'];

    // Create the view and make sure we have enough extra fields in the
    // Besetzungen table
    self::createView($projectId, $projectName, $pme->dbh);

    // Add also a new line to the BesetzungsZahlen table
    $sqlquery = 'INSERT IGNORE INTO `BesetzungsZahlen` (`ProjektId`) VALUES ('.$projectId.')';
    mySQL::query($sqlquery, $pme->dbh);
    
    // Also create the project folders.
    $projectPaths = self::maybeCreateProjectFolder($projectId, $projectName);

    // Maybe create a wiki-page with just the project-title

    if (false) {
      $orchestra = Config::$opts['orchestra']; // for the name-space
      $pagename = $orchestra.":projekte:".$projectName;

      $page = "===== ".$projectName." im Jahr ".$newvals['Jahr']." =====";

      $wikiLocation = \OCP\Config::GetAppValue("dokuwikiembed", 'wikilocation', '');
      $dwembed = new \DWEMBED\App($wikiLocation);
      $dwembed->putPage($pagename, $page, array("sum" => "Automatic CAFEVDB page creation",
                                              "minor" => false));
    }
    self::generateWikiOverview();

    // Generate an empty offline page template in the public web-space
    self::createProjectWebPage($projectId, $pme->dbh);

    return true;
  }
  
  /**@copydoc CAFEVDB\Projects::afterInsterTrigger. */
  public static function afterUpdateTrigger(&$pme, $op, $step, $oldvals, &$changed, &$newvals)
  {
    // Simply recreate the view, update the extra tables etc.
    self::createView($pme->rec, $newvals['Name'], $pme->dbh);

    if (array_search('Name', $changed) === false) {
      // Nothing more has to be done if the name stays the same
      return true;
    }

    // Drop the old view, which still exists with the old name
    $sqlquery = 'DROP VIEW IF EXISTS `'.$oldvals['Name'].'View`';
    mySQL::query($sqlquery, $pme->dbh);
    
    // Now that we link events to projects using their short name as
    // category, we also need to update all linke events in case the
    // short-name has changed.
    $events = Events::events($pme->rec, $pme->dbh);

    foreach ($events as $event) {
      // Last parameter "true" means to also perform string substitution
      // in the summary field of the event.
      Events::replaceCategory($event, $oldvals['Name'], $newvals['Name'], true);
    }

    // Now, we should also rename the project folder. We simply can
    // pass $newvals and $oldvals
    self::renameProjectFolder($newvals, $oldvals);


    // Fetch the old wiki-page, if any, push as new page to the wiki,
    // push a new "old" page to the wiki with a "has been renamed"
    // notice", then update the overview page

    $orchestra = Config::$opts['orchestra']; // for the name-space

    $oldname = $oldvals['Name'];
    $newname = $newvals['Name'];
    $oldpagename = $orchestra.":projekte:".$oldname;
    $newpagename = $orchestra.":projekte:".$newname;

    $wikiLocation = \OCP\Config::GetAppValue("dokuwikiembed", 'wikilocation', '');
    $dwembed = new \DWEMBED\App($wikiLocation);

    $oldpage =
      " *  ".$oldvals['Name']." wurde zu [[".$orchestra.":projekte:".$newname.")]] umbenant\n";
    $newpage = $dwembed->getPage($oldpagename);
    if ($newpage) {
      // Geneate stuff if there is an old page
      $dwembed->putPage($oldpagename, $oldpage, array("sum" => "Automatic CAFEVDB page renaming",
                                                      "minor" => false));
      $dwembed->putPage($newpagename, $newpage, array("sum" => "Automatic CAFEVDB page renaming",
                                                      "minor" => false));
    }    

    self::generateWikiOverview();

    // TODO: if the name changed, then change also the template, but
    // is not so important, OTOH, would just look better.
    
    return true;
  }

  /**@copydoc CAFEVDB\Projects::afterInsterTrigger. */
  public static function afterDeleteTrigger(&$pme, $op, $step, $oldvals, &$changed, &$newvals)
  {
    $projectName = $oldvals['Name'];
    if (!$projectName) {
      $projectName = Projects::fetchName($pme->rec, $pme->dbh);
      $oldvals['Name'] = $projectName;
    }

    $sqlquery = 'DROP VIEW IF EXISTS `'.$projectName.'View`';
    mySQL::query($sqlquery, $pme->dbh);

    // This was the view. We should also remove all stuff from the Besetzungen list.
    $sqlquery = "DELETE FROM Besetzungen WHERE ProjektId = ".$pme->rec;
    mySQL::query($sqlquery, $pme->dbh);

    $sqlquery = "DELETE FROM BesetzungsZahlen WHERE ProjektId = ".$pme->rec;
    mySQL::query($sqlquery, $pme->dbh);

    // And now remove the project folder ... OC has undelete
    // functionality and we have a long-ranging backup.
    self::removeProjectFolder($oldvals);

    // Delete the page template from the public web-space. However,
    // here we only move it to the trashbin.
    $webPages = self::fetchProjectWebPages($pme->rec, $pme->dbh);
    foreach ($webPages as $page) {
      // ignore errors
      \OCP\Util::writeLog(Config::APP_NAME, "Attempt to delete for ".$pme->rec.": ".$page['ArticleId']." all ".print_r($page, true), \OC_LOG::DEBUG);

      self::deleteProjectWebPage($pme->rec, $page['ArticleId'], $handle);
    }

    return true;
}

  /**Generate an associative array of extra-fields. The key is the
   * field-name, the value the number of the extra-field in the
   * Besetzungen-table. We fetch and parse the "ExtraFelder"-field from
   * the "Projekte"-table. The following rules apply:
   *
   * - "ExtraFelder" contains a comma-seprarated field list of the form
   *   FIELD1[:NR1] ,     FIELD2[:NR2] etc.
   *
   * - the explicit association in square brackets is optional, if
   *   omitted than NR is the position of the token in the "ExtraFields"
   *   value. Of course, the square-brackets must not be present, they
   *   have the meaning: "hey, this is optional".
   *
   * Note: field names must be unique.
   */
  public static function extraFields($projectId, $handle = false)
  {
    Util::debugMsg(">>>>ProjektExtraFelder: Id = $projectId");

    $query = 'SELECT `ExtraFelder` FROM `Projekte` WHERE `Id` = '.$projectId;
    $result = mySQL::query($query, $handle);
    
    // Get the single line
    $line = mySQL::fetch($result) or Util::error("Couldn't fetch the result for '".$query."'");
    
    if (Util::debugMode()) {
      print_r($line);
    }
    
    if ($line['ExtraFelder'] == '') {
      return array();
    } else {
      Util::debugMsg("Extras: ".$line['ExtraFelder']);
    }
  
    // Build an array of name - size pairs
    $tmpfields = explode(',',$line['ExtraFelder']);
    if (Util::debugMode()) {
      print_r($tmpfields);
    }
    $fields = array();
    $numbers = array();
    foreach ($tmpfields as $value) {
      $value = trim($value);
      $value = explode(':',$value);
      $fields[] = array('name' => $value[0],
                        'pos' => isset($value[1]) ? $value[1] : false,
                        'tooltip' =>  isset($value[2]) ? $value[2] : false);
      if (isset($value[1])) {
        $numbers[$value[1]] = true;
      }
    }

    // Add the missing field-numbers and make sure they do not
    // conflict with the explicitly specified ordering
    $fieldno = 1; // This time we start at ONE _NOT_ ZERO
    foreach ($fields as &$field) {
      if ($field['pos'] !== false) {
        continue;
      }
      while(isset($numbers[$fieldno++]));
      $field['pos'] = $fieldno;
    }

    Util::debugMsg("<<<<ProjektExtraFelder");

    return $fields;
  }

  /**Genereate the input data for the link to the CMS in order to edit
   * the project's public web articles inline.
   *
   * @todo Do something more useful in the case of an error (database
   * or CMS unavailable)
   */
  public static function projectProgramPME($projectId, $opts, $action, $k, $fds, $fdd, $row)
  {
    $redaxoLocation = \OCP\Config::GetAppValue('redaxo', 'redaxolocation', '');
    $rex = new \Redaxo\RPC($redaxoLocation);

    /* Fetch all the data available. */
    $webPages = self::fetchProjectWebPages($projectId);
    if ($webPages === false) {
      return L::t("Unable to fetch public web pages for project id %d",
                  array($projectId));
    }
    $articleIds = array();
    foreach ($webPages as $idx => $article) {
      // this is cheap, there are only few articles attached to a project
      $articleIds[$article['ArticleId']] = $idx;
    }
    
    $detachedPages = array();
    if ($action == 'add' || $action == 'modify') {
      // Fetch all articles and remove those already registered

      $detachedPages = $rex->articleByName('.*');
      if ($detachedPages === false) {
        $detachedPages = array(array('ArticleId' => -1,
                                     'CategoryId' => -1,
                                     'ArticleName' => L::t("Error"),
                                     'Priority' => -1));
      } else {
        foreach ($detachedPages as $idx => $article) {
          if (isset($articleIds[$article['ArticleId']])) {
            unset($detachedPages[$idx]);
          }
        }
      }
    }

    $tmpl = new \OCP\Template(Config::APP_NAME, 'project-web-articles');
    $tmpl->assign('projectArticles', $webPages);
    $tmpl->assign('detachtedArticles', $detachedPages);
    $urlTemplate = $rex->redaxoURL('%ArticleId%', $action == 'change');
    if ($action != 'change') {
      $urlTemplate .= '&rex_version=1';
    }
    $tmpl->assign('cmsURLTemplate', $urlTemplate);
    $tmpl->assign('action', $action);
    $html = $tmpl->fetchPage();
    return $html;
  }

  public static function projectActionsPME($projectName, $opts, $modify, $k, $fds, $fdd, $row)
  {
    $projectId   = $row["qf".$opts["idIndex"]];
    $placeHolder = isset($opts['placeHolder']) ? $opts['placeHolder'] : false;
    return self::projectActions($projectId, $projectName, $placeHolder);
  }

  public static function projectActions($projectId, $projectName, $placeHolder = false)
  {
    $projectPaths = self::maybeCreateProjectFolder($projectId, $projectName);

    if ($placeHolder === false) {
      // Strip the 4-digit year from the end, if present
      // $placeHolder = preg_replace("/^(.*\D)(\d{4})$/", "$1", $projectName);
      $placeHolder = $projectName; // or maybe don't strip.
    }

    // Code the value in the name attribute (for java-script)
    $params = ""
      ."ProjectId=$projectId"
      ."&Project=$projectName";
    $control = '
<span class="project-actions-block">
  <select data-placeholder="'.$placeHolder.'"
          class="project-actions"
          title="'.Config::toolTips('project-actions').'"
          name="'.$params.'">
    <option value=""></option>
    <optgroup>
    <option title="'.Config::toolTips('project-action-events').'" value="events">
      '.L::t('Events').'
    </option>
    </optgroup>
    <optgroup>
    <option title="'.Config::toolTips('project-action-brief-instrumentation').'"
            value="brief-instrumentation">
      '.L::t('Brief Instrumentation').'
    </option>
    <option title="'.Config::toolTips('project-action-detailed-instrumentation').'"
            value="detailed-instrumentation">
      '.L::t('Detailed Instrumentation').'
    </option>
    <option title="'.Config::toolTips('project-action-instrumentation-numbers').'"
            value="project-instruments">
      '.L::t('Instrumentation Numbers').'
    </option>
    </optgroup>
    <optgroup>
    <option title="'.Config::toolTips('project-action-wiki').'"
            value="project-wiki?'.urlencode(self::projectWikiLink($projectName)).'">
      '.L::t('Project Wiki Page').'
    </option>
    <option title="'.Config::toolTips('project-action-files').'"
            value="project-files?'.$projectPaths['project'].'">
      '.L::t('Project Files').'
    </option>
    </optgroup>
    <optgroup>
    <option title="'.Config::toolTips('project-action-debit-mandates').'"
              value="sepa-debit-mandates">
      '.L::t('SEPA Debit Mandates').'
    </option>
    <option title="'.Config::toolTips('project-action-financial-balance').'"
              value="profit-and-loss?'.$projectPaths['balance'].'">
      '.L::t('Profit and Loss Account').'
    </option>
    </optgroup>
  </select>
</span>';
    return $control;
  }

  /**Check for the existence of the project folder
   */
  public static function maybeCreateProjectFolder($projectId, $projectName = false, $only = false)
  {
    $project = self::fetchProject($projectId);
    if (!$projectName) {
      $projectName = $project['Name'];
    } else if ($projectName != $project['Name']) {
      return false;
    }
    
    $sharedFolder   = Config::getSetting('sharedfolder','');
    $projectsFolder = Config::getSetting('projectsfolder','');
    $balanceFolder  = Config::getSetting('projectsbalancefolder','');

    $fileView = \OC\Files\Filesystem::getView();

    $paths = array('project' => '/'.$sharedFolder.'/'.$projectsFolder,
                   'balance' => '/'.$sharedFolder.'/'.$balanceFolder.'/'.$projectsFolder);
    $returnPaths = array();
    foreach($paths as $key => $path) {
      if ($only && $key != $only) {
        continue;
      }
      if (!$fileView->is_dir($path)) {
        $fileView->mkdir($path);
      }
      $path .= "/".$project['Jahr'];
      if (!$fileView->is_dir($path)) {
        $fileView->mkdir($path);
      }
      $path .= "/".$project['Name'];
      if (!$fileView->is_dir($path)) {
        $fileView->mkdir($path);
      }
      $returnPaths[$key] = $path;
    }
    return $returnPaths;
  }

  public static function removeProjectFolder($oldProject)
  {
    $sharedFolder = Config::getSetting('sharedfolder','');
    $projectsFolder = Config::getSetting('projectsfolder','');
    $balanceFolder = Config::getSetting('projectsbalancefolder','');

    $prefixPath = array(
      'project' => '/'.$sharedFolder.'/'.$projectsFolder.'/',
      'balance' => '/'.$sharedFolder.'/'.$balanceFolder.'/'.$projectsFolder."/",
      );

    $fileView = \OC\Files\Filesystem::getView();

    foreach($prefixPath as $key => $prefix) {
                        
      $oldPath = $prefix.$oldProject['Jahr']."/".$oldProject['Name'];
      
      if ($fileView->is_dir($oldPath)) {
        if (!$fileView->deleteAll($oldPath)) {
          return false;
        }
      }
    }

    return true;
  }

  public static function renameProjectFolder($newProject, $oldProject)
  {
    $sharedFolder = Config::getSetting('sharedfolder','');
    $projectsFolder = Config::getSetting('projectsfolder','');
    $balanceFolder = Config::getSetting('projectsbalancefolder','');

    $prefixPath = array(
      'project' => '/'.$sharedFolder.'/'.$projectsFolder.'/',
      'balance' => '/'.$sharedFolder.'/'.$balanceFolder.'/'.$projectsFolder."/",
      );

    $fileView = \OC\Files\Filesystem::getView();

    $returnPaths = array();
    foreach($prefixPath as $key => $prefix) {
                        
      $oldPath = $prefix.$oldProject['Jahr']."/".$oldProject['Name'];
      $newPrefixPath = $prefix.$newProject['Jahr'];
      
      $newPath = $newPrefixPath.'/'.$newProject['Name'];
      
      if ($fileView->is_dir($oldPath)) {
        // If the year has changed it may be necessary to create a new
        // directory.
        if (!$fileView->is_dir($newPrefixPath)) {
          if (!$fileView->mkdir($newPrefixPath)) {
            return false;
          }
        }
        if (!$fileView->rename($oldPath, $newPath)) {
          return false;
        }
        $returnPaths[$key] = $newPath;
      } else {
        // Otherwise there is nothing to move; we simply create the new directory.
        $returnPaths = array_merge($returnPaths,
                                   self::maybeCreateProjectFolder($projectId, $projectName, $only = $key));
      }
    }

    return $returnPaths;
  }

  public static function wikiButtonPME($projectId, $opts, $modify, $k, $fds, $fdd, $row)
  {
    $projectName = $row["qf$opts"];
    return self::wikiButton($projectId, $projectName);
  }

  public static function wikiButton($projectId, $projectName, $value = false, $eventSelect = array())
  {
    if ($value === false) {
      $value = L::t('Project Notes');
    }
    $bvalue      = $value;
    // Code the value in the name attribute (for java-script)
    $bname       = "project-wiki?'.urlencode(self::projectWikiLink($projectName)).'">
    $bname       = htmlspecialchars($bname);
    $title       = Config::toolTips('project-wiki');
    //$image = \OCP\Util::imagePath('calendar', 'calendar.svg');
    $button =<<<__EOT__
<span class="events">
  <button type="button" class="events" title="$title" name="$bname" value="$bvalue">
    <!-- <img class="svg events" src="$image" alt="$bvalue" /> -->
  </button>
</span>
__EOT__;
    return $button;
  }

  public static function eventButtonPME($projectId, $opts, $modify, $k, $fds, $fdd, $row)
  {
    $projectName = $row["qf$opts"];
    return self::eventButton($projectId, $projectName);
  }

  public static function eventButton($projectId, $projectName, $value = false, $eventSelect = array())
  {
    if ($value === false) {
      $value = L::t('Events');
    }
    $bvalue      = $value;
    // Code the value in the name attribute (for java-script)
    $bname       = "ProjectId=$projectId&ProjectName=".$projectName;
    foreach ($eventSelect as $event) {
      $bname .= '&EventSelect[]='.$event;
    }
    $bname       = htmlspecialchars($bname);
    $title       = Config::toolTips('projectevents-button');
    $image = \OCP\Util::imagePath('calendar', 'calendar.svg');
    $button =<<<__EOT__
<span class="events">
  <button type="button" class="events" title="$title" name="$bname" value="$bvalue">
    <img class="svg events" src="$image" alt="$bvalue" />
  </button>
</span>
__EOT__;
    return $button;
  }

  /**Fetch the list of projects from the data base as a short id=>name
   * field.
   */
  public static function fetchProjects($handle = false, $year = false)
  {
    $projects = array();

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "SELECT `Id`,`Name`".($year === true ? ",`Jahr`" : "");
    $query .= " FROM `Projekte` WHERE 1 ORDER BY ";
    if ($year === true) {
      $query .= "`Jahr` ASC, `Name` ASC";
    } else {
      $query .= "`Name` ASC";
    }
    $result = mySQL::query($query, $handle, true);
    if ($year === false) {
      while ($line = mySQL::fetch($result)) {
        $projects[$line['Id']] = $line['Name'];
      }
    } else {
      while ($line = mySQL::fetch($result)) {
        $projects[$line['Id']] = array('Name' => $line['Name'], 'Jahr' => $line['Jahr']);
      }      
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $projects;
  }

  /**Fetch the ids of the public web pages related to this
   * project. Often there will be only one, but this need not be the
   * case.
   */
  public static function fetchProjectWebPages($projectId, $handle = false)
  {
    $projects = array();

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = "SELECT * FROM `ProjectWebPages` WHERE 1";
    if ($projectId > 0) {
      $query .= " AND `ProjectId` = ".$projectId;
    }
    $query .= " ORDER BY `ProjectId` ASC, `ArticleId` ASC";

    \OCP\Util::writeLog(Config::APP_NAME, "Query ".$query, \OC_LOG::DEBUG);

    $webPages = array();
    $result = mySQL::query($query, $handle, true);
    if ($result === false) {
      \OCP\Util::writeLog(Config::APP_NAME, "Query ".$query." failed", \OC_LOG::DEBUG);
      return false;
    }
    while ($line = mySQL::fetch($result)) {
      $webPages[] = $line;
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    \OCP\Util::writeLog(Config::APP_NAME, "WebPages for ".$projectId." ".print_r($webPages, true), \OC_LOG::DEBUG);

    return $webPages;
  }

  /**Create and add a new web-page. The first one will have the name
   * of the project, subsequent one have a number attached like
   * Tango2014-5
   */
  public static function createProjectWebPage($projectId, $handle = false)
  {
    $ownConnection = $handle === false;

    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $projectName = self::fetchName($projectId, $handle);
    if ($projectName === false) {
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }

    // Don't care about the archive, new pages go to preview, and the
    // id will be unique even in case of a name clash
    $previewCat = Config::getValue('redaxoPreview');
    $pageTemplate = Config::getValue('redaxoTemplate');
    
    $redaxoLocation = \OCP\Config::GetAppValue('redaxo', 'redaxolocation', '');
    $rex = new \Redaxo\RPC($redaxoLocation);

    $articles = $rex->articlesByName($projectName.'(-[0-9]+)?', $previewCat);
    if (!is_array($articles)) {
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }

    $names = array();
    foreach ($articles as $article) {
      $names[] = $srticle['name'];
    }
    $pageName = $projectName;
    if (array_search($pageName, $names) !== false) {
      for ($i = 1; ; ++$i) {
        if (array_search($pageName.'-'.$i, $names) === false) {
          // this will teminate ;)
          $pageName = $pageName.'-'.$i;
          break;
        }
      }
    }
    
    $article = $rex->addArticle($pageName, $previewCat, $pageTemplate);

    if ($article === false) {
      \OCP\Util::writeLog(Config::APP_NAME, "Error generating web page template", \OC_LOG::DEBUG);
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }

    // just forget about the rest, we can't help it anyway if the
    // names are not unique
    $article = $article[0];

    // insert into the db table to form the link
    if (self::attachProjectWebPage($projectId, $article, $handle) === false) {
      \OCP\Util::writeLog(Config::APP_NAME, "Error attaching web page template", \OC_LOG::DEBUG);
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }

    $module = Config::getValue('redaxoDefaultModule');
    $rex->addArticleBlock($article['ArticleId'], $module);

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $article;
  }
  
  /**Delete a web page. This is implemented by moving the page to the
   * Trashbin category, leaving the real cleanup to a human being.
   */
  public static function deleteProjectWebPage($projectId, $articleId, $handle = false)
  {
    self::detachProjectWebPage($projectId, $articleId);
    $redaxoLocation = \OCP\Config::GetAppValue('redaxo', 'redaxolocation', '');
    $rex = new \Redaxo\RPC($redaxoLocation);

    $trashCategory = Config::getValue('redaxoTrashbin');
    $result = $rex->moveArticle($articleId, $trashCategory);
    if ($result === false) {
      \OCP\Util::writeLog(Config::APP_NAME, "Failed moving ".$articleId." to ".$trashCategory, \OC_LOG::DEBUG);
    }
    
  }

  /**Detach a web page, but do not delete it. Meant as utility routine
   * for the UI (in order to correct wrong associations).
   */
  public static function detachProjectWebPage($projectId, $articleId, $handle = false)
  {
    $ownConnection = $handle === false;

    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = "DELETE IGNORE FROM `ProjectWebPages` 
 WHERE `ProjectId` = ".$projectId." AND `ArticleId` = ". $articleId;
    $result = mySQL::query($query, $handle);
    if ($result === false) {
      \OCP\Util::writeLog(Config::APP_NAME, "Query ".$query." failed", \OC_LOG::DEBUG);
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  /**Attach an existing web page to the project.
   *
   * @param $projectId Project Id.
   *
   * @param $article Article array as returned from $rex->articlesByName().
   *
   * @param $handle mySQL handle.
   *
   */
  public static function attachProjectWebPage($projectId, $article, $handle = false)
  {
    $ownConnection = $handle === false;

    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = "INSERT INTO `ProjectWebPages`
 (`ProjectId`, `ArticleId`, `ArticleName`, `CategoryId`, `Priority`) VALUES(".
      $projectId.",".
      $article['ArticleId'].", ".
      "'".$article['ArticleName']."', ".
      $article['CategoryId'].", ".
      $article['Priority'].")
   ON DUPLICATE KEY UPDATE ".
      "`ArticleName` = '".$article['ArticleName']."', ".
      "`CategoryId` = ".$article['CategoryId'].", ".
      "`Priority` = ".$article['Priority'];

    $result = mySQL::query($query, $handle);
    if ($result === false) {
      \OCP\Util::writeLog(Config::APP_NAME, "Query ".$query." failed", \OC_LOG::DEBUG);
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  /**Seach through the list of all projects and attach those with a
   * matching name. Something which should go to the "expert"
   * controls.
   */
  public static function attachMatchingWebPages($projectId, $handle = false)
  {
    $ownConnection = $handle === false;

    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $projectName = self::fetchName($projectId, $handle);
    if ($projectName === false) {
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }

    $previewCat = Config::getValue('redaxoPreview');
    $archiveCat = Config::getValue('redaxoArchive');

    $redaxoLocation = \OCP\Config::GetAppValue('redaxo', 'redaxolocation', '');
    $rex = new \Redaxo\RPC($redaxoLocation);

    $preview = $rex->articlesByName($projectName.'(-[0-9]+)?', $previewCat);
    if (!is_array($preview)) {
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }
    $archive = $rex->articlesByName($projectName.'(-[0-9]+)?', $archiveCat);
    if (!is_array($archive)) {
      if ($ownConnection) {
        mySQL::close($handle);
      }
      return false;
    }

    $articles = array_merge($preview, $archive);
    foreach ($articles as $article) {
      // ignore any error
      self::attachProjectWebPage($projectId, $article, $handle);
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  /**Fetch minimum and maximum project years from the Projekte table.
   */
  public static function fetchYearRange($handle = false)
  {    
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $yearCol = "Jahr";
    $query = "SELECT MIN(`$yearCol`),MAX(`$yearCol`) FROM `Projekte` WHERE 1";
    $result = mySQL::query($query, $handle);
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
      $yearRange = array();
      foreach ($row as $key => $value) {
        $yearRange[] = $value;
      }
      return array_combine(array('min', 'max'), $yearRange);
    }
    return false;
  }

  /**Fetch the project identified by $projectId.
   */
  public static function fetchProject($projectId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "SELECT * FROM `Projekte` WHERE `Id` = $projectId";
    $result = mySQL::query($query, $handle);

    $row = false;
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $row;
  }

  /**Fetch the instrumentation numbers. */
  public static function fetchInstrumentationNumbers($projectId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "SELECT * FROM `BesetzungsZahlen` WHERE `ProjektId` = $projectId";
    $result = mySQL::query($query, $handle);
    if ($result !== false && mysql_num_rows($result) == 0) {
      return array(); // can possibly happen
    }
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
    } else {
      return false;
    }

    if (isset($row["ProjektId"])) {
      unset($row["ProjektId"]);
    }
    if (isset($row["Id"])) {
      unset($row["Id"]);
    }

    $query = 'SELECT `Instrument` FROM `Instrumente` WHERE  1 ORDER BY `Sortierung` ASC';
    $result = mySQL::query($query, $handle);
    if ($result === false) {
      return false;
    }

    $final = array();
    while ($line = mySQL::fetch($result)) {
      $instrument = $line['Instrument'];
      if (isset($row[$instrument])) {
        $final[$instrument] = $row[$instrument];
      }
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $final;
  }

  /**Fetch the count of missing musicians per voice. For this to work
   * the instrumentation number have to be present in the respective
   * table, of course.
   */
  public static function fetchMissingInstrumentation($projectId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    /* Only when a positive count has been stored for the respective
     * instrument we are able to determine the missing numbers. Also,
     * excess musicians do not count as an error.
     */
    $missing = array();
    $numbers = self::fetchInstrumentationNumbers($projectId, $handle);
    foreach ($numbers as $key => $number) {
      $have = mySQL::queryNumRows(
        "FROM `Besetzungen` WHERE `ProjektId` = $projectId AND '$key' = `Instrument`",
        $handle);
      $balance = $number - $have;
      $missing[$key] = $balance;
    }

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $missing;
  }

  /**Create a HTML table with the missing musicians. */
  public static function missingInstrumentationTable($projectId, $handle = false)
  {
    $numbers = self::fetchMissingInstrumentation($projectId, $handle);
    
    $missing = array_filter($numbers, function ($val) { return $val > 0; });
    if (count($missing) > 0) {
      echo '
<div class="missing-musicians"
     id="missing-musicians-block"
     title="'.L::t("Missing Musicians").'">
  <span class="missing-musicians-title">'.L::t("Missing Musicians").'</span>
  <table class="missing-musicians">
    <tr><th>'.L::t("Instrument").'</th><th>'.L::t("Missing").'</th></tr>
';
      $cnt = 0;
      foreach ($missing as $instrument => $number) {
        if ($number <= 0) {
          continue;
        }
        echo '    <tr class="row-'.($cnt%2).'"><td class="instrument">'.$instrument.'</td><td class="deficit">'.$number.'</td></tr>'."\n";
        $cnt++;
      }
      echo '  </table>
  </div>';
    }
  }

  /** Fetch the project-name name corresponding to $projectId.
   */
  public static function fetchName($projectId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    $query = 'SELECT `Name` FROM `Projekte` WHERE `Id` = '.$projectId;
    $result = mySQL::query($query, $handle);

    $row = false;
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $row && isset($row['Name']) ? $row['Name'] : false;
  }

  /**Make sure the "Besetzungen"-table has enough extra fields. All
   * extra-fields are text-fields.
   *
   */
  public static function createExtraFields($projectId, $handle = false)
  {
    Util::debugMsg(">>>> ProjektCreateExtraFelder");

    // Fetch the extra-fields.
    $extra = self::extraFields($projectId, $handle);
    if (Util::debugMode()) {
      print_r($extra);
    }

    /* Then walk the table and simply execute one "ALTER TABLE"
     * statement for each field, ignoring the result, but we check later
     * for a possible error.
     */

    foreach ($extra as $field) {
      // forget about $name, not an issue here.  

      $query = sprintf(
        'ALTER TABLE `Besetzungen`
   ADD `ExtraFeld%02d` TEXT
   CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL',
        $field['pos']);
      $result = @mySQL::query($query, $handle, false, true); // ignore the result, be silent
    }

    // Now make sure we have it ...
    $query = "SHOW COLUMNS FROM `Besetzungen` LIKE 'ExtraFeld%'";
    $result = mySQL::query($query, $handle);

    // See what we got ...
    $fields = array();
    while ($row = mySQL::fetch($result)) {
      if (Util::debugMode()) {
        print_r($row);
      }
      $fields[] = $row['Field'];
    }
    if (Util::debugMode()) {
      print_r($fields);
    }

    foreach ($extra as $field) {
      $name = sprintf('ExtraFeld%02d', $field['pos']);
      Util::debugMsg("Check ".$name);
      if (array_search($name, $fields) === false) {
        Util::error('Extra-Field '.$field['pos'].' not Found in Table Besetzungen');
      }
    }

    Util::debugMsg("<<<< ProjektCreateExtraFelder");

    return true; // if someone cares
  }

  // Create a sensibly sorted view, fit for being exported via
  // phpmyadmin. Take all extra-fields into account, add them at end.
  public static function createView($projectId, $project = false, $handle = false)
  {
    Util::debugMsg(">>>> ProjektCreateView");

    if (! $project) {
      // Get the name
      $project = self::fetchName($projectId, $handle);
    }

    // Make sure all extra-fields exist
    self::createExtraFields($projectId, $handle);

    // Fetch the extra-fields
    $extra = self::extraFields($projectId, $handle);

    // "Extra"'s will be added at end. Generate a suitable "SELECT"
    // string for that. Ordering of field in the table is just the
    // ordering in the "$extra" table.
    $extraquery = '';
    Util::debugMsg(">>>> ProjektCreateView before extra");
    foreach ($extra as $field) {
      $extraquery .= sprintf(', `Besetzungen`.`ExtraFeld%02d` AS `'.$field['name'].'`', $field['pos']);
    }
    Util::debugMsg(">>>> ProjektCreateView after extra");

    // Now do all the stuff, do not forget the proper sorting to satisfy
    // all dummies on earth
    $sqlquery = 'CREATE OR REPLACE VIEW `'.$project.'View` AS
 SELECT
   `Musiker`.`Id` AS `MusikerId`,
   `Besetzungen`.`Instrument`,
   `Besetzungen`.`Reihung`,
   `Besetzungen`.`Stimmführer`,`Instrumente`.`Familie`,`Instrumente`.`Sortierung`,
   `Besetzungen`.`Anmeldung`,
    `Name`,`Vorname`,
   `Email`,`Telefon`,`Telefon2`,
   `Strasse`,`Postleitzahl`,`Stadt`,`Land`,
   `Besetzungen`.`Unkostenbeitrag`,
   `Besetzungen`.`Bemerkungen` AS `ProjektBemerkungen`'.
      ($extraquery != '' ? $extraquery : '').','
      .' `Instrumente` AS `AlleInstrumente`,`Sprachpräferenz`,`Geburtstag`,
   `Musiker`.`MemberStatus`,`Musiker`.`Remarks`,`MemberPortraits`.`PhotoData`,`Aktualisiert`';

    // Now do the join
    $sqlquery .= ' FROM `Musiker`
   JOIN `Besetzungen`
     ON `Musiker`.`Id` = MusikerId AND '.$projectId.'= `ProjektId`
   LEFT JOIN `Instrumente`
     ON `Besetzungen`.`Instrument` = `Instrumente`.`Instrument`
   LEFT JOIN `MemberPortraits`
     ON `MemberPortraits`.`MemberId` = `Musiker`.`Id`';

    // And finally force a sensible default sorting:
    // 1: sort on the natural orchestral ordering defined in Instrumente
    // 2: sort (reverse) on the Stimmfuehrer attribute
    // 3: sort on the sur-name
    // 4: sort on the pre-name
    $sqlquery .= 'ORDER BY `Instrumente`.`Sortierung` ASC,
 `Besetzungen`.`Reihung` ASC,
 `Besetzungen`.`Stimmführer` DESC,
 `Musiker`.`Name` ASC,
 `Musiker`.`Vorname` ASC';
 
    mySQL::query($sqlquery, $handle);

    return true;
  }

  public static function flyerImageLinkPME($projectId, $opts, $action, $k, $fds, $fdd, $row)
  {
    return self::flyerImageLink($projectId, $action);
  }

  public static function flyerImageLink($projectId, $action = 'display')
  {
    switch ($action) {
    case 'add':
      return L::t("Flyers can only be added to existing projects, please add the new
project without a flyer first.");
    case 'display':
      $span = ''
        .'<span class="photo"><img class="photo svg" src="'
        .\OCP\Util::linkTo('cafevdb', 'inlineimage.php').'?RecordId='.$projectId.'&ImagePHPClass=CAFEVDB\Projects&ImageSize=1200&PlaceHolder='.self::IMAGE_PLACEHOLDER
        .'" '
        .'title="Flyer, if available" /></span>';
      return $span;
    case 'change':
      $imagearea = ''
        .'<div id="project_flyer">
        
  <iframe name="file_upload_target" id="file_upload_target" src=""></iframe>
  <div class="tip propertycontainer" id="cafevdb_inline_image_wrapper" title="'
      .L::t("Drop image to upload (max %s)", array(\OCP\Util::humanFileSize(Util::maxUploadSize()))).'"'
        .' data-element="PHOTO">
    <ul id="phototools" class="transparent hidden contacts_property">
      <li><a class="svg delete" title="'.L::t("Delete current flyer").'"></a></li>
      <li><a class="svg edit" title="'.L::t("Edit current flyer").'"></a></li>
      <li><a class="svg upload" title="'.L::t("Upload new flyer").'"></a></li>
      <li><a class="svg cloud icon-cloud" title="'.L::t("Select image from ownCloud").'"></a></li>
    </ul>
  </div>
</div> <!-- project_flyer -->
';

      return $imagearea;
    default:
      return L::t("Internal error, don't know what to do concerning project-flyers in the given context.");
    }
  }

  public static function imagePlaceHolder()
  {
    // could probably also check for browser support for svg here
    return self::IMAGE_PLACEHOLDER;
  }

  /**Fetch a previously stored image (picture) from the DB. The image
   * may be empty.
   */
  public static function fetchImage($projectId, $handle = false)
  {
    $image = '';

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    if (false) {
      $pktSize = 32*(1 << 20);
      $query = "SET GLOBAL max_allowed_packet=$pktSize";
      mySQL::query($query, $handle, false, true);
    }
      
    $query = "SELECT `ImageData` FROM `ProjectFlyers` WHERE `ProjectId` = ".$projectId;
    $result = mySQL::query($query, $handle);

    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
      if (isset($row['ImageData'])) {
        $image = $row['ImageData'];
      }
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $image;    
  }

  /**Take a BASE64 encoded image and store it in the DB. Probably a
   * flyer or something like this.
   */
  public static function storeImage($projectId, $image, $handle = false)
  { 
    if (!isset($image) || $image == '') {
      return true;
    }

    Error::exceptions(true);

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }

    if (false) {
      $pktSize = 32*(1 << 20);
      $query = "SET GLOBAL max_allowed_packet=$pktSize";
      mySQL::query($query, $handle, false, true);
    }

    $query = "INSERT INTO `ProjectFlyers`
  (`ProjectId`,`ImageData`) VALUES (".$projectId.",'".$image."')
  ON DUPLICATE KEY UPDATE `ImageData` = '".$image."';";

    $result = mySQL::query($query, $handle) && self::storeModified($projectId, $handle);
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  /**Delete the image (picture) associated to the project. Probably a
   * flyer. More meta-data -- if needed -- should be added through the
   * Wiki.
   */
  public static function deleteImage($projectId, $handle = false)
  {
    $image = '';

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "DELETE IGNORE FROM `ProjectFlyers` WHERE `ProjectId` = ".$projectId;

    $result = mySQL::query($query, $handle) && self::storeModified($projectId, $handle);

    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }  

  /**"Touch" the last-modified time-stamp, e.g. after updating data
   * not directly stored in the projects table.
   */
  public static function storeModified($projectId, $handle = false)
  {
    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "UPDATE IGNORE `Projekte`
    SET `Aktualisiert` = '".date('Y-m-d H:i:s')."'
    WHERE `Id` = ".$projectId;

    $result = mySQL::query($query, $handle);
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $result;
  }

  /**Retriever the last-modified time-stamp. */
  public static function fetchModified($projectId, $handle = false)
  {
    $modified = 0;

    $ownConnection = $handle === false;
    if ($ownConnection) {
      Config::init();
      $handle = mySQL::connect(Config::$pmeopts);
    }
      
    $query = "SELECT `Aktualisiert` FROM `Projekte` WHERE `Id` = ".$projectId.";";

    $result = mySQL::query($query, $handle);
    if ($result !== false && mysql_num_rows($result) == 1) {
      $row = mySQL::fetch($result);
      if (isset($row['Aktualisiert'])) {
        $modified = strtotime($row['Aktualisiert']);
      }
    }
    
    if ($ownConnection) {
      mySQL::close($handle);
    }

    return $modified;
  }

  public static function projectWikiLink($name)
  {
    Config::init();
    $orchestra = Config::$opts['orchestra'];

    return $orchestra.":projekte:".$name;
  }

  /** Generate an automated overview. Actually, the orchestra-title
   * should be made configurable.
   */
  public static function generateWikiOverview($handle = false)
  {
/*
====== Projekte der Camerata Academica Freiburg e.V. ======

==== 2011 ====
  * [[Auvergne2011|Auvergne]]
  * [[Weihnachten2011]]

==== 2012 ====
  * [[Listenpunkt]]
  * [[Blah]]

==== 2013 ====
  * [[Listenpunkt]]
*/
    $orchestra = Config::$opts['orchestra']; // for the name-space

    $projects = self::fetchProjects(false, true);
    
    $page = "====== Projekte der Camerata Academica Freiburg e.V. ======\n\n";

    $year = -1;    
    foreach($projects as $id => $row) {
      if ($row['Jahr'] != $year) {
        $year = $row['Jahr'];
        $page .= "\n==== ".$year."====\n";
      }
      $name = $row['Name'];

      $matches = false;
      if (preg_match('/^(.*\D)?(\d{4})$/', $name, $matches) == 1) {
        $bareName = $matches[1];
        //$projectYear = $matches[2];
      } else {
        $bareName = $name;
      }

      // A page is tagged with the project name; if this ever should
      // be changed (which is possible), the change-trigger should
      // create a new page as coppy from the old one and change the
      // text of the old one to contain a link to the new page.

      $page .= "  * [[".self::projectWikiLink($name)."|".$bareName."]]\n";
    }

    $pagename = $orchestra.":projekte";

    $wikiLocation = \OCP\Config::GetAppValue("dokuwikiembed", 'wikilocation', '');
    $dwembed = new \DWEMBED\App($wikiLocation);
    $dwembed->putPage($pagename, $page,
                      array("sum" => "Automatic CAFEVDB synchronization",
                            "minor" => true));

  }

}; // class Projects

}

/*
 * Local Variables: ***
 * c-basic-offset: 2 ***
 * End: ***
 */

?>
