<?php
/* Orchestra member, musician and project management application.
 *
 * CAFEVDB -- Camerata Academica Freiburg e.V. DataBase.
 *
 * @author Claus-Justus Heine
 * @copyright 2011-2016 Claus-Justus Heine <himself@claus-justus-heine.de>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU GENERAL PUBLIC LICENSE
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU AFFERO GENERAL PUBLIC LICENSE for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

/**CamerataDB namespace to prevent name-collisions.
 */
namespace CAFEVDB
{

/**Display the detailed instrumentation for a project.
 */
class DetailedInstrumentation
  extends Instrumentation
{
  const CSS_PREFIX = 'cafevdb-page';
  const CSS_CLASS = 'instrumentation';
  const PROJECT_INSTRUMENTS = 'ProjectInstruments';
  const MUSICIAN_INSTRUMENTS = 'MusicianInstruments';

  function __construct($execute = true) {
    parent::__construct($execute);
    //$this->recordsPerPage = 20;
  }

  public function shortTitle()
  {
    if ($this->deleteOperation()) {
      return L::t('Remove the musician from %s?', array($this->projectName));
    } else if ($this->viewOperation()) {
      return L::t('Display of all stored data for the shown musician.');
    } else if ($this->changeOperation()) {
      return L::t('Edit the data of the displayed musician.');
    }
    return L::t("Instrumentation for Project `%s'", array($this->projectName));
  }

  public function headerText()
  {
    return $this->shortTitle();
  }

  function display()
  {
    global $debug_query;
    $debug_query = Util::debugMode('query');

    $projectName     = $this->projectName;
    $projectId       = $this->projectId;
    $opts            = $this->opts;
    $recordsPerPage  = $this->recordsPerPage;
    $userExtraFields = self::getExtraFields($projectId);
    $fieldTypes      = ProjectExtra::fieldTypes();

    $project = Projects::fetchById($projectId);

    /*
     * IMPORTANT NOTE: This generated file contains only a subset of huge amount
     * of options that can be used with phpMyEdit. To get information about all
     * features offered by phpMyEdit, check official documentation. It is available
     * online and also for download on phpMyEdit project management page:
     *
     * http://platon.sk/projects/main_page.php?project_id=5
     *
     * This file was generated by:
     *
     *                    phpMyEdit version: 5.7.1
     *       phpMyEdit.class.php core class: 1.204
     *            phpMyEditSetup.php script: 1.50
     *              generating setup script: 1.50
     */

    $opts['inc'] = $recordsPerPage;

    $opts['tb'] = $projectName . 'View';

    $opts['cgi']['persist'] = array(
      'ProjectName' => $projectName,
      'ProjectId' => $projectId,
      'Template' => 'detailed-instrumentation',
      'Table' => $opts['tb'],
      'DisplayClass' => 'DetailedInstrumentation');

    // Name of field which is the unique key
    $opts['key'] = 'Id';

    // Type of key field (int/real/string/date etc.)
    $opts['key_type'] = 'int';

    // Sorting field(s)
    $opts['sort_field'] = array('Sortierung','Reihung','-StimmfÃ¼hrer','Name','Vorname');

    // GROUP BY clause, if needed.
    $opts['groupby_fields'] = array('Id', 'ProjectInstrumentId');

    // Options you wish to give the users
    // A - add,  C - change, P - copy, V - view, D - delete,
    // F - filter, I - initial sort suppressed
    // This is a view, undeletable.
    $opts['options'] = 'CPVDFM';

    // Number of lines to display on multiple selection filters
    $opts['multiple'] = '6';

    // Navigation style: B - buttons (default), T - text links, G - graphic links
    // Buttons position: U - up, D - down (default)
    //$opts['navigation'] = 'DB';

    $export = Navigation::tableExportButton();
    $opts['buttons'] = Navigation::prependTableButton($export, true);

    // count number of finance fields
    $extraFinancial = 0;
    foreach ($userExtraFields as $field) {
      $extraFinancial += $fieldTypes[$field['Type']]['Kind'] === 'surcharge';
    }
    if ($extraFinancial > 0 || $project['Anzahlung'] > 0) {
      $useFinanceTab = true;
      $financeTab = 'finance';
    } else {
      $useFinanceTab = false;
      $financeTab = 'project';
    }

    // Display special page elements
    $opts['display'] = array_merge(
      $opts['display'],
      array(
        'form'  => true,
        //'query' => true,
        'sort'  => true,
        'time'  => true,
        'tabs' => self::tableTabs($userExtraFields, $useFinanceTab),
        'navigation' => 'VCD'
        ));

    // Set default prefixes for variables
    $opts['js']['prefix']               = 'PME_js_';
    $opts['dhtml']['prefix']            = 'PME_dhtml_';
    $opts['cgi']['prefix']['operation'] = 'PME_op_';
    $opts['cgi']['prefix']['sys']       = 'PME_sys_';
    $opts['cgi']['prefix']['data']      = 'PME_data_';

    //$opts['cgi']['append']['PME_sys_fl'] = 1;

    /* Get the user's default language and use it if possible or you can
       specify particular one you want to use. Refer to official documentation
       for list of available languages. */
    //  $opts['language'] = $_SERVER['HTTP_ACCEPT_LANGUAGE'] . '-UTF8';

    /* Table-level filter capability. If set, it is included in the WHERE clause
       of any generated SELECT statement in SQL query. This gives you ability to
       work only with subset of data from table.

       $opts['filters'] = "column1 like '%11%' AND column2<17";
       $opts['filters'] = "section_id = 9";
       $opts['filters'] = "PMEtable0.sessions_count > 200";
    */

    /* Field definitions

       Fields will be displayed left to right on the screen in the order in which they
       appear in generated list. Here are some most used field options documented.

       ['name'] is the title used for column headings, etc.;
       ['maxlen'] maximum length to display add/edit/search input boxes
       ['trimlen'] maximum length of string content to display in row listing
       ['width'] is an optional display width specification for the column
       e.g.  ['width'] = '100px';
       ['mask'] a string that is used by sprintf() to format field output
       ['sort'] true or false; means the users may sort the display on this column
       ['strip_tags'] true or false; whether to strip tags from content
       ['nowrap'] true or false; whether this field should get a NOWRAP
       ['select'] T - text, N - numeric, D - drop-down, M - multiple selection
       ['options'] optional parameter to control whether a field is displayed
       L - list, F - filter, A - add, C - change, P - copy, D - delete, V - view
       Another flags are:
       R - indicates that a field is read only
       W - indicates that a field is a password field
       H - indicates that a field is to be hidden and marked as hidden
       ['URL'] is used to make a field 'clickable' in the display
       e.g.: 'mailto:$value', 'http://$value' or '$page?stuff';
       ['URLtarget']  HTML target link specification (for example: _blank)
       ['textarea']['rows'] and/or ['textarea']['cols']
       specifies a textarea is to be used to give multi-line input
       e.g. ['textarea']['rows'] = 5; ['textarea']['cols'] = 10
       ['values'] restricts user input to the specified constants,
       e.g. ['values'] = array('A','B','C') or ['values'] = range(1,99)
       ['values']['table'] and ['values']['column'] restricts user input
       to the values found in the specified column of another table
       ['values']['description'] = 'desc_column'
       The optional ['values']['description'] field allows the value(s) displayed
       to the user to be different to those in the ['values']['column'] field.
       This is useful for giving more meaning to column values. Multiple
       descriptions fields are also possible. Check documentation for this.
    */

    $opts['fdd'] = array();

    $opts['fdd']['Id'] = array(
      'name'     => L::t('Instrumentation Id'),
      'select'   => 'T',
      'options'  => 'AVCPDR', // auto increment
      'maxlen'   => 5,
      'align'    => 'right',
      'default'  => '0',
      'sort'     => true,
      'tab'      => array('id' => 'instrumentation')
      );

    $musIdIdx = count($opts['fdd']);
    $opts['fdd']['MusikerId'] = array(
      'tab'      => array('id' => 'musician'),
      'name'     => L::t('Musician Id'),
      'input'    => 'H',
      'select'   => 'T',
      'options'  => 'LAVCPD', // auto increment
      'maxlen'   => 5,
      'align'    => 'right',
      'default'  => '0',
      'sort'     => true,
      );

    $musFirstNameIdx = count($opts['fdd']);
    $opts['fdd']['Vorname'] = array(
      'name'     => 'Vorname',
      'select'   => 'T',
      'maxlen'   => 384,
      'sort'     => true,
      'tab'      => array('id' => 'tab-all') // display on all tabs, or just give -1
      );

    $musLastNameIdx = count($opts['fdd']);
    $opts['fdd']['Name'] = array(
      'name'     => 'Name',
      'select'   => 'T',
      'maxlen'   => 384,
      'sort'     => true,
      'tab'      => array('id' => 'tab-all')
      );

    $opts['fdd']['ProjectInstrumentKey'] = array(
      'name'   => L::t('Project Instrument'),
      'sql'    => 'GROUP_CONCAT(DISTINCT ProjectInstrumentKey ORDER BY ProjectInstrumentId ASC)',
      'select' => 'N',
      'input'  => 'HR'
      );

    $opts['fdd']['ProjectInstrumentId'] = array(
      'name'        => L::t('Project Instrument'),
      'select'      => 'M',
      'sql'         => 'GROUP_CONCAT(DISTINCT ProjectInstrumentId ORDER BY ProjectInstrumentId ASC)',
      'maxlen'      => 36,
      'css'         => array('postfix' => ' project-instrument'),
      'sort'        => true,
      'values|VDPC' => array(
        'table'       => 'Instrumente',
        'column'      => 'Id',
        'orderby'     => '$table.Sortierung',
        'description' => array('columns' => array('Instrument')),
        /* This rather fancy fillter masks out all instruments
         * currently not registerd with the given musician, but allows
         * for the currently active instrument.
         */
        'filters' => ("FIND_IN_SET(`Instrument`,
  CONCAT_WS(',',(SELECT GROUP_CONCAT(DISTINCT `ProjectInstrument`) FROM `\$main_table` WHERE \$record_id = `\$main_table`.`Id` GROUP BY \$main_table.Id),
                (SELECT DISTINCT `MusicianInstrument` FROM `\$main_table`
                          WHERE \$record_id = `\$main_table`.`Id`)))"),
        'join' => '$join_table.Id = $main_table.ProjectInstrumentId'
        ),
      'values|LF' => array(
        'table'   => 'Instrumente',
        'column'  => 'Id',
        'orderby' => '$table.Sortierung',
        'description' => array('columns' => array('Instrument')),
        'filters' => ("`Instrument` IN ".
                      "(SELECT `ProjectInstrument` FROM `\$main_table` WHERE 1)"),
        'join' => '$join_table.Id = $main_table.ProjectInstrumentId'
        ),
      'values2|VD' => $this->instruments,
      'valueGroups' => $this->instrumentInfo['idGroups'],
      'tab' => array('id' => array('instrumentation', 'project'))
      );

    $opts['fdd']['ProjectInstrument'] = array(
      'name'     => L::t('Project Instrument'),
      'sql'      => 'GROUP_CONCAT(DISTINCT ProjectInstrument ORDER BY ProjectInstrumentId ASC)',
      'input'    => 'HR',
      );

    $opts['fdd']['Reihung'] = array(
      'name' => 'Stimme',
      'select' => 'N',
      'maxlen' => '3',
      'sort' => true,
      'tab' => array('id' => 'instrumentation'));

    $opts['fdd']['StimmfÃ¼hrer'] = array(
      'name|LF' => ' &alpha;',
      'name|CAPVD' => L::t("Section Leader"),
      'tab' => array('id' => 'instrumentation'),
      'options'  => 'LAVCPDF',
      'select' => 'O',
      'maxlen' => '1',
      'sort' => true,
      'escape' => false,
      'values2|CAP' => array('1' => '&nbsp;&nbsp;&nbsp;&nbsp;' /* '&alpha;' */),
      'values2|LVDF' => array('0' => '&nbsp;', '1' => '&alpha;'),
      'tooltip' => L::t("Set to `%s' in order to mark the section leader",
                        array("&alpha;")),
      'display|LF' => array('popup' => function($data) {
          return Config::ToolTips('section-leader-mark');
        }),
      'css'      => array('postfix' => ' section-leader tooltip-top'),
      );

    $opts['fdd']['Anmeldung'] = array(
      'name|LF' => ' &#10004;',
      'name|CAPDV' => L::t("Registration"),
      'tab' => array('id' => array('project', 'instrumentation')),
      'options'  => 'LAVCPDF',
      'select' => 'O',
      'maxlen' => '1',
      'sort' => true,
      'escape' => false,
      'values2|CAP' => array('1' => '&nbsp;&nbsp;&nbsp;&nbsp;' /* '&#10004;' */),
      'values2|LVDF' => array('0' => '&nbsp;', '1' => '&#10004;'),
      'tooltip' => L::t("Set to `%s' in order to mark participants who passed a personally signed registration form to us.",
                        array("&#10004;")),
      'display|LF' => array('popup' => function($data) {
          return Config::ToolTips('registration-mark');
        }),
      'css'      => array('postfix' => ' registration tooltip-top'),
      );

    $opts['fdd']['MusicianInstrumentKey'] = array(
      'name'   => L::t('Musican Instrument'),
      'select' => 'T',
      'input'  => 'HR'
      );

    $opts['fdd']['MusicianInstrumentId'] = array(
      'name'        => L::t('All Instruments'),
      'css'         => array('postfix' => ' musician-instruments tooltip-top'),
      'display|LF'  => array('popup' => 'data'),
      'input'       => 'S', // needs to be handled separately
      //'options'   => 'AVCPD',
      'select'      => 'M',
      'maxlen'      => 136,
      'sort'        => true,
      'values2'     => $this->instrumentInfo['byId'],
      'valueGroups' => $this->instrumentInfo['idGroups'],
      'tab'         => array('id' => array('musician', 'instrumentation'))
      );

    $opts['fdd']['Sortierung'] = array(
      'name'     => 'Orchester Sortierung',
      'select'   => 'N',
      'input'    => 'HR',
      'maxlen'   => 8,
      'default'  => '0',
      'sort'     => true
      );

    $opts['fdd']['MemberStatus'] = array(
      'name'     => strval(L::t('Member Status')),
      'tab'      => array('id' => array('musician')), // multiple tabs are legal
      'select'   => 'D',
      'maxlen'   => 128,
      'sort'     => true,
      'css'     => array('postfix' => ' memberstatus tooltip-wide'),
      'values2'  => $this->memberStatusNames,
      'tooltip' => config::toolTips('member-status')
      );

    $feeIdx = count($opts['fdd']);
    $opts['fdd']['Unkostenbeitrag'] = Config::$opts['money'];
    $opts['fdd']['Unkostenbeitrag']['name'] = "Unkostenbeitrag\n(Gagen negativ)";
    $opts['fdd']['Unkostenbeitrag']['default'] = $project['Unkostenbeitrag'];
    $opts['fdd']['Unkostenbeitrag']['css']['postfix'] .= ' fee';
    $opts['fdd']['Unkostenbeitrag']['tab'] = array('id' => $financeTab);

    if ($project['Anzahlung'] > 0) {
      // only include if configured in project
      $opts['fdd']['Anzahlung'] = Config::$opts['money'];
      $opts['fdd']['Anzahlung']['name'] = "Anzahlung";
      $opts['fdd']['Anzahlung']['default'] = $project['Anzahlung'];
      $opts['fdd']['Anzahlung']['css']['postfix'] .= ' deposit';
      $opts['fdd']['Anzahlung']['tab'] = array('id' => $financeTab);
    }

    $needDebitMandates = Projects::needDebitMandates($projectId);
    $paymentStatusValues2 = array(
      'outstanding' => '&empty;',
      'awaitingdepositdebit' => '&#9972;',
      'deposited' => '&#9684;',
      'awaitingdebit' => '&#9951;',
      'payed' => '&#10004;'
      );

    if (Projects::needDebitMandates($projectId)) {

      $memberTableId = Config::getValue('memberTableId');
      $monetary = ProjectExtra::monetaryFields($userExtraFields, $fieldTypes);

      $amountPaidIdx = count($opts['fdd']);
      $opts['fdd']['AmountPaid'] = array(
        'input' => 'HR',
        );

      $paidCurrentYearIdx = count($opts['fdd']);
      $opts['fdd']['PaidCurrentYear'] = array(
        'input' => 'HR',
        );

      $opts['fdd']['TotalProjectFees'] = array(
        'tab'      => array('id' => $financeTab),
        'name'     => L::t('Total Charges'),
        'css'      => array('postfix' => ' total-project-fees money'),
        'sort'    => false,
        'options' => 'VDLF', // wrong in change mode
        'input' => 'VR',
        'sql' => '`PMEtable0`.`Unkostenbeitrag`',
        'php' => function($amount, $op, $field, $fds, $fdd, $row, $recordId)
        use ($monetary, $amountPaidIdx, $paidCurrentYearIdx, $projectId, $memberTableId, $musIdIdx)
        {
          foreach($fds as $key => $label) {
            if (!isset($monetary[$label])) {
              continue;
            }
            $value = $row['qf'.$key];
            if (empty($value)) {
              continue;
            }
            $field   = $monetary[$label];
            $allowed = $field['AllowedValues'];
            $type    = $field['Type'];
            $amount += self::extraFieldSurcharge($value, $allowed, $type['Multiplicity']);
          }

          if ($projectId === $memberTableId) {
            $amount += InstrumentInsurance::annualFee($row['qf'.$musIdIdx]);
            $paid = $row['qf'.$paidCurrentYearIdx];
          } else {
            $paid = $row['qf'.$amountPaidIdx];
          }

          // display as TOTAL/PAID/REMAINDER
          $rest = $amount - $paid;

          $amount = Util::moneyValue($amount);
          $paid = Util::moneyValue($paid);
          $rest = Util::moneyValue($rest);
          return ('<span class="totals finance-state">'.$amount.'</span>'
                  .'<span class="received finance-state">'.$paid.'</span>'
                  .'<span class="outstanding finance-state">'.$rest.'</span>');
        },
        'tooltip'  => Config::toolTips('project-total-fee-summary'),
        'display|LFVD' => array('popup' => 'tooltip'),
        );

      $opts['fdd']['Lastschrift'] = array(
        'tab'      => array('id' => $financeTab),
        'name'     => L::t('Direct Debit'),
        'css'      => array('postfix' => ' direct-debit-allowed'),
        'values2|CAP' => array('1' => '&nbsp;&nbsp;&nbsp;&nbsp;' /*'&#10004;'*/),
        'values2|LVDF' => array('0' => '&nbsp;',
                                '1' => '&#10004;'),
        'escape' => false,
        //'values2|CAP' => array(1 => ''),
        //'values2|LVFD' => array(1 => L::t('true'), 0 => L::t('false')),
        'default'  => '',
        'select'   => 'O',
        'sort'     => true,
        'tooltip'  => Config::toolTips('project-direct-debit-allowed'),
        'display|LF' => array('popup' => 'tooltip'),
        );

      $debitJoinCondition =
        '('.
        '$join_table.projectId = '.$projectId.
        ' OR '.
        '$join_table.projectId = '.$memberTableId.
        ')'.
        ' AND $join_table.musicianId = $main_table.MusikerId'.
        ' AND $join_table.active = 1';

      // One virtual field in order to be able to manage SEPA debit
      // mandates. Note that in rare circumstances there may be two
      // debit mandates: one for general and one for the project. We
      // fetch both with the same ordering and leave it to the calling
      // code to do THE RIGHT THING (tm).
      $mandateIdx = count($opts['fdd']);
      $mandateAlias = "`PMEjoin".$mandateIdx."`";
      $opts['fdd']['SepaDebitMandate'] = array(
        'name' => L::t('SEPA Debit Mandate'),
        'input' => 'VR',
        'tab' => array('id' => $financeTab),
        'select' => 'M',
        'options' => 'LFACPDV',
        'sql' => "GROUP_CONCAT(DISTINCT ".$mandateAlias.".`mandateReference`
  ORDER BY ".$mandateAlias.".`projectId` DESC)",
        'values' => array(
          'table' => 'SepaDebitMandates',
          'column' => 'mandateReference',
          'join' => $debitJoinCondition,
          'description' => 'mandateReference'
          ),
        'nowrap' => true,
        'sort' => true,
        'php' => function($mandates, $action, $k, $fds, $fdd, $row, $recordId)
        use ($musIdIdx, $musFirstNameIdx, $musLastNameIdx)
        {
          if ($this->pme_bare) {
            return $mandates;
          }
          $projectId = $this->projectId;
          $projectName = $this->projectName;
          // can be multi-valued (i.e.: 2 for member table and project table)
          $mandateProjects = $row['qf'.($k+1)];
          $mandates = Util::explode(',', $mandates);
          $mandateProjects = Util::explode(',', $mandateProjects);
          if (count($mandates) !== count($mandateProjects)) {
            throw new \RuntimeException(
              L::t('Data inconsistency, mandates: "%s", projects: "%s"',
                   array(implode(',', $mandates),
                         implode(',', $mandateProjects)))
              );
          }

          // Careful: this changes when rearranging the ordering of the display
          $musicianId        = $row['qf'.$musIdIdx];
          $musicianFirstName = $row['qf'.$musFirstNameIdx];
          $musicianLastName  = $row['qf'.$musLastNameIdx];
          $musician = $musicianLastName.', '.$musicianFirstName;

          $html = array();
          foreach($mandates as $key => $mandate) {
            if (empty($mandate)) {
              continue;
            }
            $expired = Finance::mandateIsExpired($mandate);
            $mandateProject = $mandateProjects[$key];
            if ($mandateProject === $projectId) {
              $html[] = self::sepaDebitMandateButton(
                $mandate, $expired,
                $musicianId, $musician,
                $projectId, $projectName);
            } else {
              $mandateProjectName = Projects::fetchName($mandateProject);
              $html[] = self::sepaDebitMandateButton(
                $mandate, $expired,
                $musicianId, $musician,
                $projectId, $projectName,
                $mandateProject, $mandateProjectName);
            }
          }
          if (empty($html)) {
            // Empty default knob
            $html = array(self::sepaDebitMandateButton(
                            L::t("SEPA Debit Mandate"), false,
                            $musicianId, $musician,
                            $projectId, $projectName));
          }
          return implode("\n", $html);
        },
        );

      $mandateProjectIdx = count($opts['fdd']);
      $opts['fdd']['DebitMandateProject'] = array(
        'input' => 'VHR',
        'name' => 'internal data',
        'options' => 'H',
        'select' => 'T',
        'sql' => "GROUP_CONCAT(DISTINCT ".$mandateAlias.".`projectId`
  ORDER BY ".$mandateAlias.".`projectId` DESC)",
        );
    }

    // Generate input fields for the extra columns
    foreach ($userExtraFields as $field) {
      $fieldName = $name = $field['Name'];
      $fieldId   = $field['Id'];

      $type = $fieldTypes[$field['Type']];

      if ($type['Kind'] === 'surcharge') {
        $tab = array('id' => $financeTab);
      } else {
        $tab = array('id' => 'project');
      }
      if (!empty($field['Tab'])) {
        $tabId = self::tableTabId($field['Tab']);
        $tab = array('id' => $tabId);
      }

      $curColIdx = count($opts['fdd']); // current column
      $opts['fdd'][$name] = array(
        'name'     => $name, // ."\n(".$projectName.")",
        'css'      => array('postfix' => ' extra-field'),
        'tab'      => $tab,
        'select'   => 'T',
        'maxlen'   => 65535,
        'textarea' => array('css' => '',
                            'rows' => 2,
                            'cols' => 32),
        'display|LF' => array('popup' => 'data'),
        'default'  => $field['DefaultValue'],
        'escape'   => false,
        'sort'     => true
        );

      $fdd = &$opts['fdd'][$name];
      if (!empty($field['ToolTip'])) {
        $opts['fdd'][$name]['tooltip'] = $field['ToolTip'];
      }

      $allowed = ProjectExtra::explodeAllowedValues($field['AllowedValues'], false, true);
      $values2     = array();
      $valueTitles = array();
      $valueData   = array();
      foreach($allowed as $idx => $value) {
        $key = $value['key'];
        if (empty($key)) {
          continue;
        }
        if ($value['flags'] === 'deleted') {
          continue;
        }
        $values2[$key] = $value['label'];
        $valueTitles[$key] = $value['tooltip'];
        $valueData[$key] = $value['data'];
      }

      switch ($type['Name']) {
      case 'Date':
        $fdd['maxlen'] = 10;
        $fdd['datemask'] = 'd.m.Y';
        $fdd['css']['postfix'] .= ' date';
        $fdd['maxlen'] = 10;
        unset($fdd['textarea']);
        break;
      case 'HTML':
        $fdd['textarea'] = array('css' => 'wysiwygeditor',
                                 'rows' => 5,
                                 'cols' => 50);
        $fdd['css']['postfix'] .= ' hide-subsequent-lines';
        $fdd['display|LF'] = array('popup' => 'data');
        $fdd['escape'] = false;
        break;
      case 'Money':
        $fdd = Config::$opts['money'];
        $fdd['tab'] = $tab;
        $fdd['name'] = $name."\n(".$projectName.")";
        $fdd['css']['postfix'] .= ' extra-field';
        $fdd['default'] = $field['DefaultValue'];
        break;
      case 'Integer':
        $fdd['select'] = 'N';
        $fdd['mask'] = '%d';
        unset($fdd['textarea']);
        break;
      case 'Float':
        $fdd['select'] = 'N';
        $fdd['mask'] = '%g';
        unset($fdd['textarea']);
        break;
      case 'Boolean':
        reset($values2); $key = key($values2);
        $fdd['values2|CAP'] = array($key => ''); // empty label for simple checkbox
        $fdd['values2|LVDF'] = array(0 => L::t('false'),
                                     $key => L::t('true'));
        $fdd['select'] = 'O';
        $fdd['default'] = (string)!!(int)$field['DefaultValue'];
        $fdd['css']['postfix'] .= ' boolean';
        unset($fdd['textarea']);
        break;
      case 'Enum':
      case 'Set':
        $fdd['values2'] = $values2;
        $fdd['valueTitles'] = $valueTitles;
        $fdd['valueData'] = $valueData;
        if ($type['Multiplicity'] == 'parallel') {
          $fdd['css']['postfix'] .= ' set';
          $fdd['select'] = 'M';
        } else {
          $fdd['css']['postfix'] .= ' enumeration allow-empty';
          $fdd['select'] = 'D';
        }
        unset($fdd['textarea']);
        break;
      case 'SurchargeOption':
        // just use the amount to pay as label
        reset($values2); $key = key($values2);
        $money = Util::moneyValue(reset($valueData));
        $fdd['values2|CAP'] = array($key => $money); // empty label for simple checkbox
        $fdd['values2|LVDF'] = array(0 => '-,--',
                                     $key => $money);
        $fdd['select'] = 'O';
        $fdd['default'] = (string)!!(int)$field['DefaultValue'];
        $fdd['css']['postfix'] .= ' boolean money surcharge';
        unset($fdd['textarea']);
        break;
      case 'SurchargeEnum':
      case 'SurchargeSet':
        foreach($values2 as $key => $value) {
          $money = Util::moneyValue($valueData[$key], Config::$locale);
          $mlen = mb_strlen($money);
          $vlen = mb_strlen($value);
          $padr = 10;
          $padl = 10;
          while ($vlen++ < $padr) {
            $value .= '&nbsp;';
          }
          while ($mlen++ < $padl) {
            $money = '&nbsp;'.$money;
          }
          $values2[$key] = $value.'&nbsp;&nbsp;&nbsp;'.$money;
        }
        $fdd['values2'] = $values2;
        $fdd['values2glue'] = "<br/>";
        $fdd['valueTitles'] = $valueTitles;
        $fdd['valueData'] = $valueData;
        $fdd['escape'] = false;
        $fdd['display|LF'] = array('popup' => 'data');
        unset($fdd['textarea']);
        if ($type['Multiplicity'] == 'parallel') {
          $fdd['css']['postfix'] .= ' surcharge set hide-subsequent-lines';
          $fdd['select'] = 'M';
        } else {
          $fdd['css']['postfix'] .= ' surcharge enum money allow-empty';
          $fdd['select'] = 'D';
        }
        break;
      case 'SimpleGroup':
      case 'PredefinedGroup':
        $fdd = array_merge(
          $fdd, [
            'select' => 'M',
            'sql' => 'GROUP_CONCAT(DISTINCT PMEjoin'.$curColIdx.'.InstrumentationId)',
            'filter' => 'having',
            'values' => [
              'table' => "SELECT
  b.Id AS InstrumentationId,
  CONCAT_WS(' ', m.Vorname, m.Name) AS Name,
  m.Name AS LastName, m.Vorname AS FirstName,
  fd.FieldValue AS GroupId
FROM Besetzungen b
LEFT JOIN Musiker AS m
  ON b.MusikerId = m.Id
LEFT JOIN ProjectExtraFieldsData fd
  ON b.Id = fd.BesetzungenId AND fd.FieldId = $fieldId
WHERE b.ProjektId = $projectId",
              'column' => 'InstrumentationId',
              'description' => 'Name',
              'groups' => "CONCAT('".$fieldName." ',\$table.GroupId)",
              'data' => "CONCAT('{\"GroupId\":\"',\$table.GroupId,'\"}')",
              'orderby' => '$table.GroupId ASC, $table.LastName ASC, $table.FirstName ASC',
              'join' => '$main_table.'.$fieldName.' = $join_table.GroupId',
              ],
            'valueGroups' => [ -1 => L::t('without group') ],
            ]);

        // in filter mode mask out all non-group-members
        $fdd['values|LF'] = array_merge(
          $fdd['values'],
          [ 'filters' => '$table.GroupId IS NOT NULL' ]);

        // after all this tweaking, we still need the real group id
        $opts['fdd'][$fieldName.'GroupId'] = [
          'input' => 'SH',
          'sql' => $fieldName
          ];

        break;
      default:
        break;
      }

      // Need also a hidden Id-field
      $opts['fdd'][$name.'Id'] = array(
        'name'     => $name.'Id',
        'tab'      => array('id' => 'project'),
        'input'    => 'H',
        'select'   => 'N',
        'escape'   => false,
        'sort'     => false);
    }

    $opts['fdd']['ProjectRemarks'] =
      array('name' => L::t("Remarks")."\n(".$projectName.")",
            'select'   => 'T',
            'maxlen'   => 65535,
            'css'      => array('postfix' => ' remarks tooltip-left'),
            'display|LF' => array('popup' => 'data'),
            'textarea' => array('css' => 'wysiwygeditor',
                                'rows' => 5,
                                'cols' => 50),
            'escape' => false,
            'sort'   => true,
            'tab'    => array('id' => 'project')
        );

    // fetch the list of all projects in order to provide a somewhat
    // cooked filter list
    $allProjects = Projects::fetchProjects(false /* no db handle */, true /* include years */);
    $projectQueryValues = array('*' => '*'); // catch-all filter
    $projectQueryValues[''] = L::t('no projects yet');
    $projects = array();
    $groupedProjects = array();
    foreach ($allProjects as $proj) {
      $projectQueryValues[$proj['Name']] = $proj['Jahr'].': '.$proj['Name'];
      $projects[$proj['Name']] = $proj['Name'];
      $groupedProjects[$proj['Name']] = $proj['Jahr'];
    }

    $opts['fdd']['Projects'] = array(
      'name' => L::t('Projects'),
      'tab' => array('id' => array('musician')),
      'input' => 'R',
      'options' => 'LFV',
      'select' => 'M',
      'display|LF'  => array('popup' => 'data'),
      'css'      => array('postfix' => ' projects'),
      'sort' => true,
      'values' => array('queryValues' => $projectQueryValues),
      'values2' => $projects,
      'valueGroups' => $groupedProjects
      );

    $opts['fdd']['Email'] = Config::$opts['email'];
    $opts['fdd']['Email']['tab'] = array('id' => 'musician');

    $opts['fdd']['MobilePhone'] = array(
      'name'     => L::t('Mobile Phone'),
      'tab'      => array('id' => 'musician'),
      'css'      => array('postfix' => ' phone-number'),
      'display'  => array('popup' => function($data) {
          if (PhoneNumbers::validate($data)) {
            return nl2br(PhoneNumbers::metaData());
          } else {
            return null;
          }
        }),
      'nowrap'   => true,
      'select'   => 'T',
      'maxlen'   => 384,
      'sort'     => true
      );

    $opts['fdd']['FixedLinePhone'] = array(
      'name'     => L::t('Fixed Line Phone'),
      'tab'      => array('id' => 'musician'),
      'css'      => array('postfix' => ' phone-number'),
      'display'  => array('popup' => function($data) {
          if (PhoneNumbers::validate($data)) {
            return nl2br(PhoneNumbers::metaData());
          } else {
            return null;
          }
        }),
      'nowrap'   => true,
      'select'   => 'T',
      'maxlen'   => 384,
      'sort'     => true
      );

    $opts['fdd']['Strasse'] = array(
      'name'     => L::t('Street'),
      'tab'      => array('id' => 'musician'),
      'css'      => array('postfix' => ' musician-address street'),
      'nowrap'   => true,
      'select'   => 'T',
      'maxlen'   => 384,
      'sort'     => true
      );

    $opts['fdd']['Postleitzahl'] = array(
      'name'     => L::t('Postal Code'),
      'tab'      => array('id' => 'musician'),
      'css'      => array('postfix' => ' musician-address postal-code'),
      'select'   => 'T',
      'maxlen'   => 11,
      'sort'     => true
      );

    $opts['fdd']['Stadt'] = array(
      'name'     => L::t('City'),
      'tab'      => array('id' => 'musician'),
      'css'      => array('postfix' => ' musician-address city'),
      'select'   => 'T',
      'maxlen'   => 384,
      'sort'     => true
      );

    $countries = GeoCoding::countryNames();
    $countryGroups = GeoCoding::countryContinents();

    $opts['fdd']['Land'] = array(
      'name'     => L::t('Country'),
      'tab'      => array('id' => 'musician'),
      'select'   => 'D',
      'maxlen'   => 128,
      'default'  => Config::getValue('streetAddressCountry'),
      'values2'     => $countries,
      'valueGroups' => $countryGroups,
      'css'      => array('postfix' => ' musician-address country chosen-dropup tooltip-top'),
      'sort'     => true,
      );

    $opts['fdd']['Geburtstag'] = Config::$opts['birthday'];
    $opts['fdd']['Geburtstag']['tab'] = 'musician';

    $opts['fdd']['Remarks'] = array(
      'name'     => strval(L::t('General Remarks')),
      'tab'      => array('id' => 'musician'),
      'select'   => 'T',
      'maxlen'   => 65535,
      'css'      => array('postfix' => ' remarks tooltip-left'),
      'display|LF' => array('popup' => 'data'),
      'textarea' => array('css' => 'wysiwygeditor',
                          'rows' => 5,
                          'cols' => 50),
      'escape'   => false,
      'sort'     => true);

    $opts['fdd']['SprachprÃ¤ferenz'] = array(
      'name'     => L::t('Preferred Language'),
      'tab'      => array('id' => 'musician'),
      'select'   => 'D',
      'maxlen'   => 128,
      'default'  => 'Deutsch',
      'sort'     => true,
      'values'   => Config::$opts['languages']);

    $opts['fdd']['Portrait'] = array(
      'name'    => L::t('Photo'),
      'tab'     => array('id' => 'musician'),
      'input'   => 'V',
      'select'  => 'T',
      'options' => 'ACPDV',
      'sql'     => '`PMEtable0`.`MusikerId`',
      'php' => function($musicianId, $action, $k, $fds, $fdd, $row, $recordId) {
        $stampIdx = array_search('Aktualisiert', $fds);
        $stamp = strtotime($row['qf'.$stampIdx]);
        return Musicians::portraitImageLink($musicianId, $action, $stamp);
      },
      'css' => array('postfix' => ' photo'),
      'default' => '',
      'css' => array('postfix' => ' photo'),
      'sort' => false);

    $opts['fdd']['UUID'] = array(
      'name'     => 'UUID', // no translation
      'tab'      => array('id' => 'miscinfo'),
      'options'  => 'AVCPDR', // auto increment
      'css'      => array('postfix' => ' musician-uuid'),
      'select'   => 'T',
      'maxlen'   => 32,
      'sort'     => false
      );

    $opts['fdd']['Aktualisiert'] = array_merge(
      Config::$opts['datetime'],
      array("name" => L::t("Last Updated"),
            'tab'     => array('id' => array('project', 'musician', 'instrumentation')),
            "default" => date(Config::$opts['datetime']['datemask']),
            "nowrap"  => true,
            "options" => 'LFAVCPDR' // Set by update trigger.
        ));

    $opts['triggers']['update']['before'] = [];
    $opts['triggers']['update']['before'][] = 'CAFEVDB\Util::beforeAnythingTrimAnything';
    $opts['triggers']['update']['before'][] = 'CAFEVDB\Musicians::beforeTriggerSetTimestamp';
    $opts['triggers']['update']['before'][] = 'CAFEVDB\DetailedInstrumentation::beforeUpdateTrigger';
    $opts['triggers']['update']['before'][] = 'CAFEVDB\Util::beforeUpdateRemoveUnchanged';

    // that one has to be adjusted further ...
    $opts['triggers']['delete']['before'][] = 'CAFEVDB\DetailedInstrumentation::beforeDeleteTrigger';

    // fill the numbers table
    $opts['triggers']['filter']['pre'][]  =
      $opts['triggers']['update']['pre'][]  =
      $opts['triggers']['insert']['pre'][]  = 'CAFEVDB\ProjectExtra::preTrigger';

    if ($this->pme_bare) {
      // disable all navigation buttons, probably for html export
      $opts['navigation'] = 'N'; // no navigation
      $opts['options'] = '';
      // Don't display special page elements
      $opts['display'] =  array_merge($opts['display'],
                                      array(
                                        'form'  => false,
                                        'query' => false,
                                        'sort'  => false,
                                        'time'  => false,
                                        'tabs'  => false,
                                        ));
      // Disable sorting buttons
      foreach ($opts['fdd'] as $key => $value) {
        $opts['fdd'][$key]['sort'] = false;
      }
    }

    $opts['execute'] = $this->execute;

    // Inject the underlying table name as 'querygroup' parameter
    // s.t. update queries can be split into several queries which
    // only target one of the underlying tables.
    $viewStructure = Projects::viewStructure($projectId, $userExtraFields);
    //print_r($viewStructure);
    foreach($opts['fdd'] as $name => &$data) {
      if (isset($viewStructure[$name])) {
        $joinField = $viewStructure[$name];
        $table = $joinField['table'];
        $tablename = $joinField['tablename'];
        $key = isset($joinField['key']) ? $joinField['key'] : false;
        $column = $joinField['column'] === true ? $name : $joinField['column'];
        $data['querygroup'] = array(
          'table' => $table,
          'tablename' => $tablename,
          'column' => $column,
          'key' => $key
          );
      }
    }

    $this->pme = new \phpMyEdit($opts); // Generate and possibly display the table

    if (Util::debugMode('request')) {
      echo '<PRE>';
      print_r($_POST);
      echo '</PRE>';
    }

  } // display()

  /**This is the phpMyEdit before-delete trigger. We cannot delete
   * lines from the view directly, we have to resort to the underlying
   * 'Besetzungen' table (which obviously is also what we want here!).
   *
   * phpMyEdit calls the trigger (callback) with
   * the following arguments:
   *
   * @param[in] $pme The phpMyEdit instance
   *
   * @param[in] $op The operation, 'insert', 'update' etc.
   *
   * @param[in] $step 'before' or 'after'
   *
   * @param[in] $oldValues Self-explanatory.
   *
   * @param[in,out] &$changed Set of changed fields, may be modified by the callback.
   *
   * @param[in,out] &$newValues Set of new values, which may also be modified.
   *
   * @return boolean. If returning @c false the operation will be terminated
   *
   * @bug Too long, just split into multiple "triggers" or call subroutines.
   */
  public static function beforeUpdateTrigger(&$pme, $op, $step, &$oldValues, &$changed, &$newValues)
  {
    // Perform a lazy create-on-write philosophy: if the field does
    // not yet exist, inject a new one.

    $projectId = Util::cgiValue('ProjectId', false);
    if ($projectId === false) {
      return false;
    }

    /* error_log('******* before ******************'); */
    /* error_log('old '.print_r($oldValues, true)); */
    /* error_log('new '.print_r($newValues, true)); */
    /* error_log('chg '.print_r($changed, true)); */

    /**************************************************************************
     *
     * project-instruments are handled by a pivot-table and have to be
     * updated out of order.
     *
     */

    $key = array_search('ProjectInstrumentId', $changed);
    if ($key !== false) {
      $values = array(
        'ProjectId' => $projectId,
        'MusicianId' => $oldValues['MusikerId'],
        'InstrumentationId' => $oldValues['Id']
        );

      $table    = self::PROJECT_INSTRUMENTS;
      $field    = 'ProjectInstrumentId';
      $keyField = 'ProjectInstrumentKey';
      $newIds  = Util::explode(',', $newValues[$field]);
      $oldIds  = Util::explode(',', $oldValues[$field]);
      $oldKeys = Util::explode(',', $oldValues[$keyField]);
      $oldRecords = array_combine($oldIds, $oldKeys);
      foreach(array_diff($oldIds, $newIds) as $id) {
        $query = "DELETE FROM $table WHERE Id = ".$oldRecords[$id];
        if (mySQL::query($query, $pme->dbh) !== false) {
          $old = array_merge($values,
                             array('InstrumentId' => $id,
                                   'Id' => $oldRecords[$id]));
          mySQL::logDelete($table, 'Id', $old, $pme->dbh);
        }
      }
      foreach(array_diff($newIds, $oldIds) as $id) {
        $new = array_merge($values, array('InstrumentId' => $id));
        $result = mySQL::insert($table, $new, $pme->dbh);
        $rec = mySQL::newestIndex($pme->dbh);
        if($result !== false && $rec > 0) {
          mySQL::logInsert($table, $rec, $new, $pme->dbh);
        }
      }
      unset($changed[$key]);
      unset($newValues['ProjectInstrumentId']);
    }

    /*
     *
     * Now do the same with the musician's instrument.
     *
     *************************************************************************
     *
     * musician-instruments are handled by a pivot-table and have to be
     * updated out of order.
     *
     */

    $key = array_search('MusicianInstrumentId', $changed);
    if ($key !== false) {
      $field    = 'MusicianInstrumentId';
      $keyField = 'MusicianInstrumentKey';
      $table    = self::MUSICIAN_INSTRUMENTS;
      $musicianId = $oldValues['MusikerId'];
      $newIds  = Util::explode(',', $newValues[$field]);
      $oldIds  = Util::explode(',', $oldValues[$field]);
      $oldKeys = Util::explode(',', $oldValues[$keyField]);
      $oldRecords = array_combine($oldIds, $oldKeys);
      foreach(array_diff($oldIds, $newIds) as $id) {
        $query = "DELETE FROM $table WHERE Id = ".$oldRecords[$id];
        if (mySQL::query($query, $pme->dbh) !== false) {
          $old = array('Id' => $oldRecords[$id],
                       'MusicianId' => $musicianId,
                       'InstrumentId' => $id);
          mySQL::logDelete($table, 'Id', $old, $pme->dbh);
        }
      }
      foreach(array_diff($newIds, $oldIds) as $id) {
        $new = array('MusicianId' => $musicianId, 'InstrumentId' => $id);
        $result = mySQL::insert($table, $new, $pme->dbh);
        $rec = mySQL::newestIndex($pme->dbh);
        if($result !== false && $rec > 0) {
          mySQL::logInsert($table, $rec, $new, $pme->dbh);
        }
      }
      unset($changed[$key]);
      unset($newValues[$field]);
      unset($newValues[$keyField]);
    }

    /*
     *
     *************************************************************************/

    $types = ProjectExtra::fieldTypes($pme->dbh);
    $extraFields = ProjectExtra::projectExtraFields($projectId, true, $pme->dbh);
    foreach ($extraFields as $field) {
      $fieldName = $field['Name'];
      $fieldId   = $field['Id'];
      $idName    = $fieldName.'Id';

      if (($extraKey = array_search($fieldName, $changed)) === false) {
        // don't bother if fields are anchanged ...
        //error_log('unchanged');
        continue;
      }

      // These lines make sure a data item exists for this
      // musician. Is this really necessary? In principle not ...
      if (empty($oldValues[$idName])) {

        $values = array('BesetzungenId' => $oldValues['Id'],
                        'FieldId' => $fieldId);
        $result = mySQL::insert(ProjectExtra::DATA_TABLE,
                                $values,
                                $pme->dbh,
                                mySQL::IGNORE);
        if ($result === false) {
          return false;
        }
        $idx = mySQL::newestIndex($pme->dbh);
        if ($idx === false) {
          $idData = mySQL::fetchColumn(ProjectExtra::DATA_TABLE,
                                       'Id',
                                       '`BesetzungenId` = '.$oldValues['Id'].
                                       ' AND '.
                                       '`FieldId` = '.$fieldId,
                                       $pme->handle);
          if ($idData !== false && count($idData) == 1) {
            $idx = $idData[0];
          }
        }
        if ($idx === false) {
          return false;
        }
        $oldValues[$idName] = $idx;
      }

      // Tweaks for individual fields
      switch($types[$field['Type']]['Name']) {
      case 'Integer':
        // as we only store texts internally, force to int now ...
        if (isset($newValues[$fieldName])) {
          $newValues[$fieldName] = (string)intval($newValues[$fieldName]);
          if ($newValues[$fieldName] !== $oldValues[$fieldName]) {
            $changed[] = $fieldName;
          }
        }
        break;
      case 'Float':
        // as we only store texts internally, force to float now ...
        if (isset($newValues[$fieldName])) {
          $newValues[$fieldName] = (string)floatval($newValues[$fieldName]);
          if ($newValues[$fieldName] !== $oldValues[$fieldName]) {
            $changed[] = $fieldName;
          }
        }
        break;
      case 'Boolean':
        // as we only store texts internally, force to int now ...
        if (isset($newValues[$fieldName])) {
          $newValues[$fieldName] = (string)(int)!!$newValues[$fieldName];
          if ($newValues[$fieldName] !== $oldValues[$fieldName]) {
            $changed[] = $fieldName;
          }
        }
        break;
      case 'SimpleGroup':
        //error_log('************ simple group');
        // Here the group update logic has to go. Oops.
        $allowed = ProjectExtra::explodeAllowedValues($field['AllowedValues']);
        $max = $allowed[0]['data']; // ATM, may change

        //error_log('************* values: '.print_r($allowed, true));

        // $changed almost always contains the group because the
        // values submitted by the form are the group participants,
        // while the value stored in the DB is the group id.
        $newIds = Util::explode(',', $newValues[$fieldName]);
        $oldIds = Util::explode(',', $oldValues[$fieldName]);
        if (count($newIds) > $max) {
          //error_log('************ too many');
          return false;
        }
        $oldGroupId = $oldValues[$fieldName.'GroupId'];
        $newGroupId = $newValues[$fieldName.'GroupId'];

        //error_log('********* old new group: '.$newGroupId);
        if (empty($newGroupId)) {
          // generate a new one ...
          $newGroupId = ProjectExtra::maxFieldValue($fieldId, $pme->dbh);
          ++$newGroupId;
        }
        //error_log('********* old group: '.$oldGroupId);
        //error_log('********* new group: '.$newGroupId);

        /* TODO: fix the update rules.
         *
         * old group-id same as new group-id: just update member list
         *
         * old group-id differs from new group-id: just add given
         * member list to new group, leave old group untouched.
         *
         */

        $table = 'ProjectExtraFieldsData';
        if ($oldGroupId === $newGroupId) {
          // just update list of members

          // record removed ids
          foreach(array_diff($oldIds, $newIds) as $id) {
            $query = "DELETE FROM $table WHERE
  BesetzungenId = $id AND FieldId = $fieldId";
            if (mySQL::query($query, $pme->dbh) !== false) {
              $old = [ 'BesetzungenId' => $id,
                       'FieldId' => $fieldId,
                       'FieldValue' => $oldGroupId ];
              mySQL::logDelete($table, 'Id', $old, $pme->dbh);
            }
          }

          // record new ids
          foreach(array_diff($newIds, $oldIds) as $id) {
            $new = [
              'BesetzungenId' => $id,
              'FieldId' => $fieldId,
              'FieldValue' => $newGroupId
              ];
            // just update on duplicate key
            //error_log('insert values: '.print_r($new, true));
            $result = mySQL::insert($table, $new, $pme->dbh, mySQL::UPDATE);
            $rec = mySQL::newestIndex($pme->dbh);
            if($result !== false) {
              mySQL::logInsert($table, $rec, $new, $pme->dbh);
            }
          }
        } else {
          // Group ids differ. Just remove ourselfs from the old group
          // and add all members to new group id
          if (!empty($oldGroupId)) {
            $query = "DELETE FROM $table WHERE
  BesetzungenId = ".$pme->rec." AND FieldId = $fieldId";
            if (mySQL::query($query, $pme->dbh) !== false) {
              $old = [ 'BesetzungenId' => $pme->rec,
                       'FieldId' => $fieldId,
                       'FieldValue' => $oldGroupId ];
              mySQL::logDelete($table, 'Id', $old, $pme->dbh);
            }
          }
          if (!empty($newIds)) {
            if (empty($oldGroupId)) {
              // interprete this case as a "lazy" group definition; we
              // want to add the current record to the new group!
              if (array_search($pme->rec, $newIds) === false) {
                $newIds[] = $pme->rec;
              }
            }
            // record new ids
            foreach($newIds as $id) {
              $new = [
                'BesetzungenId' => $id,
                'FieldId' => $fieldId,
                'FieldValue' => $newGroupId
                ];
              //error_log('insert values: '.print_r($new, true));
              // just update on duplicate key
              $result = mySQL::insert($table, $new, $pme->dbh, mySQL::UPDATE);
              $rec = mySQL::newestIndex($pme->dbh);
              if($result !== false) {
                mySQL::logInsert($table, $rec, $new, $pme->dbh);
              }
            }
          }
        }
        unset($changed[$extraKey]);
        unset($newValues[$fieldName]);
        break;
      }
    }

    /* error_log('******* after ******************'); */
    /* error_log('old '.print_r($oldValues, true)); */
    /* error_log('new '.print_r($newValues, true)); */
    /* error_log('chg '.print_r($changed, true)); */

    return true;
  }

  /**This is the phpMyEdit before-delete trigger. We cannot delete
   * lines from the view directly, we have to resort to the underlying
   * 'Besetzungen' table (which obviously is also what we want here!).
   *
   * phpMyEdit calls the trigger (callback) with
   * the following arguments:
   *
   * @param[in] $pme The phpMyEdit instance
   *
   * @param[in] $op The operation, 'insert', 'update' etc.
   *
   * @param[in] $step 'before' or 'after'
   *
   * @param[in] $oldValues Self-explanatory.
   *
   * @param[in,out] &$changed Set of changed fields, may be modified by the callback.
   *
   * @param[in,out] &$newValues Set of new values, which may also be modified.
   *
   * @return boolean. If returning @c false the operation will be terminated
   *
   * @todo: This trigger does not yet delete all possible
   * "side-effects" -- extra fields, monetary stuff etc.
   */
  public static function beforeDeleteTrigger(&$pme, $op, $step, $oldValues, &$changed, &$newValues)
  {//DELETE FROM Spielwiese2013View WHERE (Id = 146)
    $id = $oldValues['Id'];
    $where = "`Id` = ".$id;
    $realOldVals = mySQL::fetchRows('Besetzungen', $where, null, $pme->dbh);
    $query = "DELETE FROM `Besetzungen` WHERE ".$where;
    $result = mySQL::query($query, $pme->dbh);
    if ($result !== false && count($realOldVals) == 1) {
      mySQL::logDelete('Besetzungen', 'Id', $realOldVals[0], $pme->dbh);
    }
    return false;
  }

  /**Generate a clickable form element which finally will display the
   * debit-mandate dialog, i.e. load some template stuff by means of
   * some java-script and ajax blah.
   */
  public static function sepaDebitMandateButton($reference, $expired,
                                                $musicianId, $musician,
                                                $projectId, $projectName,
                                                $mandateProjectId = null, $mandateProjectName = null)
  {
    empty($mandateProjectId) && $mandateProjectId = $projectId;
    empty($mandateProjectName) && $mandateProjectName = $projectName;
    $data = array('MandateReference' => $reference,
                  'MandateExpired' => $expired,
                  'MusicianId' => $musicianId,
                  'MusicianName' => $musician,
                  'ProjectId' => $projectId,
                  'ProjectName' => $projectName,
                  'MandateProjectId' => $mandateProjectId,
                  'MandateProjectName' => $mandateProjectName);
    $data = htmlspecialchars(json_encode($data, JSON_NUMERIC_CHECK));

    $css= ($reference == (L::t("SEPA Debit Mandate")) ? "missing-data " : "")."sepa-debit-mandate";
    $button = '<div class="sepa-debit-mandate tooltip-left">'
      .'<input type="button" '
      .'       id="sepa-debit-mandate-'.$musicianId.'-'.$projectId.'"'
      .'       class="'.$css.' tooltip-left" '
      .'       value="'.$reference.'" '
      .'       title="'.L::t("Click to enter details of a potential SEPA debit mandate").' " '
      .'       name="SepaDebitMandate" '
      .'       data-debit-mandate="'.$data.'" '
      .'/>'
      .'</div>';
    return $button;
  }


  public static function tableTabId($idOrName)
  {
    $dflt = self::defaultTableTabs();
    foreach($dflt as $tab) {
      if ($idOrName === $tab['name']) {
        return $idOrName;
      }
    }
    return $idOrName;
  }

  /**Export the default tabs family. */
  public static function defaultTableTabs($useFinanceTab = false)
  {
    $pre = array(
      array('id' => 'instrumentation',
            'default' => true,
            'tooltip' => Config::toolTips('project-instrumentation-tab'),
            'name' => L::t('Instrumentation related data')),
      array('id' => 'project',
            'tooltip' => Config::toolTips('project-metadata-tab'),
            'name' => L::t('Project related data'))
      );
    $finance = array(
      array('id' => 'finance',
            'tooltip' => Config::toolTips('project-finance-tab'),
            'name' => L::t('Finance related data'))
      );
    $post = array(
      array('id' => 'musician',
            'tooltip' => Config::toolTips('project-personaldata-tab'),
            'name' => L::t('Personal data')),
      array('id' => 'tab-all',
            'tooltip' => Config::toolTips('pme-showall-tab'),
            'name' => L::t('Display all columns'))
      );
    if ($useFinanceTab) {
      return array_merge($pre, $finance, $post);
    } else {
      return array_merge($pre, $post);
    }
  }

  /**Export the description for the table tabs. */
  public static function tableTabs($extraFields = false, $useFinanceTab = false)
  {
    $dfltTabs = self::defaultTableTabs($useFinanceTab);

    if (!is_array($extraFields)) {
      return $dfltTabs;
    }

    $extraTabs = array();
    foreach($extraFields as $field) {
      if (empty($field['Tab'])) {
        continue;
      }

      $extraTab = $field['Tab'];
      foreach($dfltTabs as $tab) {
        if ($extraTab === $tab['id'] ||
            $extraTab === (string)$tab['name']) {
          $extraTab = false;
          break;
        }
      }
      if ($extraTab !== false) {
        $extraTabs[] = array('id' => $extraTab,
                             'name' => L::t($extraTab),
                             'tooltip' => Config::toolTips('extra-fields-extra-tab'));
      }
    }

    return array_merge($dfltTabs, $extraTabs);
  }

  /**Internal function: given a (multi-select) surcharge choice
   * compute the associated amount of money and return that as float.
   */
  public static function extraFieldSurcharge($value, $allowedValues, $multiplicity)
  {
    switch ($multiplicity) {
    case 'single':
      // Non empty value means "yes".
      $key = $allowedValues[0]['key'];
      if ($key !== $value) {
        \OCP\Util::writeLog(Config::APP_NAME,
                            __METHOD__.': '.
                            'Stored value "'.$value.'" unequal to stored key "'.$key.'"',
                            \OCP\Util::WARN);
      }
      return (float)$allowedValues[0]['data'];
    case 'multiple':
      foreach($allowedValues as $item) {
        if ($item['key'] === $value) {
          return (float)$item['data'];
        }
      }
      \OCP\Util::writeLog(Config::APP_NAME,
                          __METHOD__.': '.
                          'No data item for multiple choice key "'.$value.'"',
                          \OCP\Util::ERROR);
      return 0.0;
    case 'parallel':
      $keys = Util::explode(',', $value);
      $found = false;
      $amount = 0.0;
      foreach($allowedValues as $item) {
        if (array_search($item['key'], $keys) !== false) {
          $amount += (float)$item['data'];
          $found = true;
        }
      }
      if (!$found) {
        \OCP\Util::writeLog(Config::APP_NAME,
                            __METHOD__.': '.
                            'No data item for parallel choice key "'.$value.'"',
                            \OCP\Util::ERROR);
      }
      return $amount;
    }
    return 0.0;
  }

  /**Sum up the total amount of all project fees for the given project
   * and musician. $row should be the corresponding row from the project-view.
   */
  public static function projectExtraFees($projectId, $recordId, $row, $handle = false)
  {
    $monetary = ProjectExtra::monetaryFields($projectId, $handle);
    $amount = 0.0;
    foreach($row as $columnLabel => $value) {
      if (empty($value)) {
        continue;
      }
      if (isset($monetary[$columnLabel])) {
        $field   = $monetary[$columnLabel];
        $allowed = $field['AllowedValues'];
        $type    = $field['Type'];
        $amount += self::extraFieldSurcharge($value, $allowed, $type['Multiplicity']);
      }
    }
    return $amount;
  }


}; // class DetailedInstrumentation

}

?>
