<?php
/**
 * Orchestra member, musician and project management application.
 *
 * CAFEVDB -- Camerata Academica Freiburg e.V. DataBase.
 *
 * @author Claus-Justus Heine <himself@claus-justus-heine.de>
 * @copyright 2011-2024 Claus-Justus Heine
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

namespace OCA\CAFEVDB\PageRenderer\FieldTraits;

use OCA\CAFEVDB\Database\Doctrine\ORM\Entities;
use OCA\CAFEVDB\Database\Legacy\PME\PHPMyEdit;
use OCA\CAFEVDB\PageRenderer\PMETableViewBase;
use OCA\CAFEVDB\Service\MusicianService;

/**
 * Convenience hack which generates an musician entity from the data found in
 * the legacy $row records of PHPMyEdit.
 */
trait MusicianFromRowTrait
{
  use QueryFieldTrait;
  use \OCA\CAFEVDB\Traits\ConfigTrait;
  use \OCA\CAFEVDB\Traits\EntityManagerTrait;

  /** @var PHPMyEdit */
  protected $pme;

  /**
   * Fill an instance of Entities\Musician with the data from a legacy
   * PHPMyEdit query.
   *
   * @param array $row The data generated by PHPMyEdit.
   *
   * @param null|PHPMyEdit $pme Instance of PME.
   *
   * @return array
   * ```
   * [ 'musician' => MUSICIAN_ENTITY, 'categories' => ADDRESSBOOK_CATEGORIES ]
   * ```
   *
   * @bug This should be moved to a trait for reuse only in classes needing it.
   */
  protected function musicianFromRow(array $row, ?PHPMyEdit $pme)
  {
    $pme = $pme?:$this->pme;
    $joinTable = !empty($pme->fdn[PMETableViewBase::joinTableMasterFieldName(PMETableViewBase::MUSICIANS_TABLE)]);
    $data = [];
    foreach ($pme->fds as $idx => $label) {
      if (isset($row[$this->queryIndexField($idx)])) {
        $data[$label] = $row[$this->queryIndexField($idx)];
      } elseif (isset($row[$this->queryField($idx)])) {
        $data[$label] = $row[$this->queryField($idx)];
      }
    }
    $categories = [];
    $musician = new Entities\Musician();
    if ($joinTable) {
      // make sure to fetch the id-record
      foreach ($this->joinStructure as $joinInfo) {
        if ($joinInfo['table'] == PMETableViewBase::MUSICIANS_TABLE) {
          $idColumn = $joinInfo['identifier']['id'];
          $id = $row[$this->queryField($idColumn)];
          $musician->setId($id);
          break;
        }
      }
    }
    $userIdSlugSeen = false;
    foreach ($data as $key => $value) {
      // In order to support "categories" the same way as the
      // AddressBook-integration we need to feed the
      // Musician-entity with more data:
      switch ($key) {
        case 'all_projects':
        case 'projects':
          $categories = array_merge($categories, explode(PMETableViewBase::VALUES_SEP, Util::removeSpaces($value)));
          break;
        case $this->joinTableFieldName(PMETableViewBase::MUSICIAN_INSTRUMENTS_TABLE, 'instrument_id'):
          foreach (explode(PMETableViewBase::VALUES_SEP, Util::removeSpaces($value)) as $instrumentId) {
            $categories[] = $this->instrumentInfo['byId'][$instrumentId] ?? null;
          }
          break;
        case $this->joinTableFieldName(PMETableViewBase::MUSICIAN_EMAILS_TABLE, 'address'):
          $musician->setEmail(new Entities\MusicianEmailAddress($value, $musician));
          break;
        default:
          if ($joinTable) {
            $fieldInfo = $this->joinTableField($key);
            if ($fieldInfo['table'] != PMETableViewBase::MUSICIANS_TABLE) {
              continue 2;
            }
            $column = $fieldInfo['column'];
          } else {
            $column = $key;
          }
          switch ($column) {
            case 'email':
              try {
                $musician->setEmail($value, $musician);
              } catch (Throwable $t) {
                $this->logException($t);
                /** @var MusicianService $musicianService */
                $musicianService = $this->di(MusicianService::class);
                $value = $musicianService->generateDisabledEmailAddress($musician);
                $musician->setEmail($value);
              }
              break;
            case 'user_id_slug':
              $userIdSlugSeen = true;
              // fallthrough
            default:
              try {
                $musician[$column] = $value;
                break;
              } catch (Throwable $t) {
                // Don't care, we know virtual stuff is not there
              }
          }
          break;
      }
    }
    if (!$userIdSlugSeen) {
      $musicianId = $musician->getId();
      $musician = $this->findEntity(Entities\Musician::class, $musicianId);
      if (empty($musician)) {
        $this->logError('NO MUSICIAN FOR ROW ' . $musicianId . ' ' . print_r($row, true));
      }
    }
    return [ 'musician' => $musician, 'categories' => array_filter($categories) ];
  }
}
