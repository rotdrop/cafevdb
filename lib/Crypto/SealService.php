<?php
/**
 * Orchestra member, musician and project management application.
 *
 * CAFEVDB -- Camerata Academica Freiburg e.V. DataBase.
 *
 * @author Claus-Justus Heine
 * @copyright 2011-2016, 2020, 2021, 2022 Claus-Justus Heine <himself@claus-justus-heine.de>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU GENERAL PUBLIC LICENSE
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU AFFERO GENERAL PUBLIC LICENSE for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace OCA\CAFEVDB\Crypto;

use OCP\Security\ICrypto;
use OCP\ILogger;

class SealService
{
  use \OCA\CAFEVDB\Traits\LoggerTrait;

  /** @var ICrypto */
  private $crypto;

  public function __construct(ICrypto $crypto, ILogger $logger)
  {
    $this->crypto = $crypto;
    $this->logger = $logger;
  }

  /**
   * Seal the given data by encrypting it with a random key and encrpyting the
   * random key by the "user"-keys passed in $keyEncryption.
   *
   * @param string $data The data to seal
   *
   * @param ICryptor[] $keyEncryption The encryption classes to encode the
   * user-keys with, an array of the form:
   * ```
   * [ USER1 => CRYPTOR1, USER2 => CRYPTOR2, ... ]
   * ```
   *
   * @return null|string A string of the form
   *
   * LLLLLLLLL|DDD....DDDD|USER1:KEY1;USER2:KEY2...
   *
   * So an 8 decimal digits length followed by that many encrypted data
   * followed by the user-ids and the encrpyted encryption keys.
   */
  public function seal(string $data, array $keyEncryption):?string
  {
    $sealKey = \random_bytes(64);
    $encryptedData = $this->crypto->encrypt($data, $sealKey);

    /** @var ICryptor $sealCryptor */
    foreach ($keyEncryption as $userId => $sealCryptor) {
      $sealData[] = $userId . ':' . $sealCryptor->encrypt($sealKey);
    }
    $sealedData = sprintf('%08d|', strlen($encryptedData));
    $sealedData .= $encryptedData . '|';
    $sealedData .= implode(';', $sealData);
    return $sealedData;
  }

  /**
   * Loose check if the given $data may be a valid seal. This may lead to
   * false positives.
   *
   * @param string $data
   *
   * @return bool
   */
  public function isSealedData(?string $data):bool
  {
    if (strlen($data??'') < 10) {
      return false;
    }
    if ($data[8] != '|') {
      return false;
    }
    $length = (int)substr($data, 0, 8);
    if (strlen($data) < (10+$length) || $data[8+1+$length] != '|') {
      return false;
    }
    return true;
  }

  /**
   * Break-up the given seal-data into the encrypted data portion and an array
   * of encrypted keys.
   *
   * @param string $data Encrypted seal-data
   *
   * @return array
   * ```
   * [
   *    'data' => ENCRYPTED_DATA_STRING,
   *    'keys' => [ USER1 => KEY1, USER2 => KEY2, ... ],
   * ]
   * ```
   */
  public function parseSeal(string $data)
  {
    $length = (int)substr($data, 0, 8);
    $sealData = [
      'data' => substr($data, 9, $length),
      'keys' => [],
    ];
    $keyData = explode(';', substr($data, 10 + $length));
    foreach ($keyData as $seal) {
      list($keyUser, $sealedKey) = explode(':', $seal);
      $sealData['keys'][$keyUser] = $sealedKey;
    }
    return $sealData;
  }

  /**
   * Unseal the given data which supposedly previously was generated by
   * seal() for the given user-id and key-cryptor.
   *
   * @param string $data
   *
   * @param string $userId
   *
   * @param ICryptor $keyCryptor
   *
   * @return null|string
   */
  public function unseal(string $data, string $userId, ICryptor $keyCryptor):?string
  {
    $seal = $this->parseSeal($data);
    if (empty($sealedKey = $seal['keys'][$userId])) {
      return null;
    }
    $key = $keyCryptor->decrypt($sealedKey);

    return $this->crypto->decrypt($seal['data'], $key);
  }


}
