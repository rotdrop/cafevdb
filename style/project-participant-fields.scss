/**
 * Orchestra member, musicion and project management application.
 *
 * CAFEVDB -- Camerata Academica Freiburg e.V. DataBase.
 *
 * @author Claus-Justus Heine
 * @copyright 2011-2016, 2021, 2022 Claus-Justus Heine <himself@claus-justus-heine.de>
 * @license AGPL-3.0-or-later
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

/******************************************************************************
 *
 * participant-field stuff
 *
 * Rather complicated, css classes:
 *
 * not-STUFF-hidden qualifies for bening shown
 * STUFF-hiffen has precedence and tries to hide.
 *
 * STUFF is a css-class attached to some parent element.
 *
 */

@use "sass:list";
@use "local";

// Hide selected elements by default, elementShownIf() will then override the visibility again
@mixin defaultHiddenElement($element, $prefix: "&", $relation: "~") {
  #{$prefix} {
    & #{$relation} {
      #{$element} {
        &.default-hidden {
          display:none;
        }
      }
    }
  }
}

/// Hide an element by default and show it only if the $prefix has the
/// given property set. Elements are shown if the have a not-#{$property}-hidden attribute.
///
/// @param{list} $property A CSS class or list of CSS classes
///
@mixin elementShownIf($property, $element, $prefix: "&", $relation: "~", $display: unset, $important: false) {
  $important: if($important, "!important", "");
  $prefixProperty: local.listToString($property, ".");
  $elementProperty: local.listToString($property, "-");

  // @include defaultHiddenElement($element, $prefix, $relation);
  #{$prefix} {
    &.#{$prefixProperty} {
      & #{$relation} {
        #{$element} {
          &.default-hidden.not-#{$elementProperty}-hidden {
            display:#{$display}#{$important};
          }
        }
      }
    }
  }
}

// Hide an element if $prefix.$property is set and the element(s) have the class
// $property-hidden
@mixin elementHiddenIf($property, $element, $prefix: "&", $relation: "~") {
  #{$prefix} {
    &.#{$property} {
      & #{$relation} {
        #{$element} {
          &, &[class*="hidden"] {
            &.#{$property}-hidden {
              display:none;
            }
          }
        }
      }
    }
  }
}

/***************************************************/

@mixin defaultHiddenColumn($prefix: "&", $relation: "") {
  @include defaultHiddenElement("th, td", $prefix, $relation);
}
@mixin columnShownIf($property, $prefix: "&", $important: false) {
  @include elementShownIf($property, "th, td", $prefix, $relation: "", $display: table-cell, $important: $important);
}
@mixin columnShownIfMultiplicity($multiplicity, $prefix: "&", $important: false) {
  @include columnShownIf(multiplicity-#{$multiplicity}, $prefix, $important);
}
@mixin columnShownIfDataType($dataType, $prefix: "&", $important: false) {
  @include columnShownIf(data-type-#{$dataType}, $prefix, $important);
}

@mixin columnHiddenIf($property, $prefix: "&", $relation: "") {
  @include elementHiddenIf($property, "th, td", $prefix, $relation);
}
@mixin columnHiddenIfMultiplicity($multiplicity, $prefix: "&", $relation: "") {
  @include columnHiddenIf(multiplicity-#{$multiplicity}, $prefix, $relation);
}
@mixin columnHiddenIfDataType($dataType, $prefix: "&", $relation: "") {
  @include columnHiddenIf(data-type-#{$dataType}, $prefix, $relation);
}

@mixin defaultHiddenRow($prefix: "&", $relation: "~") {
  @include defaultHiddenElement("tr", $prefix, $relation);
}
@mixin rowShownIf($property, $prefix: "&", $relation: "~", $important: false) {
  @include elementShownIf($property, "tr", $prefix, $relation, table-row, $important)
}
@mixin rowShownIfMultiplicity($multiplicity, $prefix: "&", $relation: "~") {
  @include rowShownIf(multiplicity-#{$multiplicity}, $prefix, $relation);
}
@mixin rowShownIfDataType($dataType, $prefix: "&", $relation: "~") {
  @include rowShownIf(data-type-#{$dataType}, $prefix, $relation);
}

@mixin rowHiddenIf($property, $prefix: "&", $relation: "~") {
  @include elementHiddenIf($property, "tr", $prefix, $relation);
}
@mixin rowHiddenIfMultiplicity($multiplicity, $prefix: "&", $relation: "~") {
  @include rowHiddenIf(multiplicity-#{$multiplicity}, $prefix, $relation);
}
@mixin rowHiddenIfDataType($dataType, $prefix: "&", $relation: "~") {
  @include rowHiddenIf(data-type-#{$dataType}, $prefix, $relation);
}

@mixin showAlternate($prefixSelector, $selector, $prefix: "&", $middle: "&", $postfix: "", $display: unset) {
  #{$prefix} {
    &:not(#{$prefixSelector}) {
      #{$middle} {
        #{$postfix}:not(#{$selector}) {
          display:#{$display};
        }
        #{$postfix}#{$selector} {
          display: none;
        }
      }
    }
    &#{$prefixSelector} {
      #{$middle} {
        #{$postfix}:not(#{$selector}) {
          display: none;
        }
        #{$postfix}#{$selector} {
          display:#{$display};
        }
      }
    }
  }
}

@mixin showAlternateDataType($dataType, $prefix: "&", $middle: "&", $postfix: "", $display: unset) {
  @include showAlternate(".data-type-#{$dataType}", ".#{$dataType}", $prefix, $middle, $postfix, $display);
}

@mixin dataOptionsTable($prefix: "", $operation: "display") {
  $optionsTable: "table.data-options";

  @if $operation == "display" {
    td.pme-value #{$optionsTable}.operation-#{$operation} {
      th, td {
        padding:3px;
      }
    }
    td.pme-cell #{$optionsTable}.operation-#{$operation} {
      th, td {
        padding:1px;
      }
    }
  }
  #{$optionsTable} {

    border-collapse:collapse;
    border-spacing:1px;

    th {
      font-style:italic;
      font-weight:bold;
      text-align:center;
    }

    @include defaultHiddenColumn();
    @include defaultHiddenRow("&", "");
    @each $dataType in service-fee, date-time, date {
      @include columnShownIfDataType($dataType);
    }
    @each $multiplicity in groupofpeople, groupsofpeople {
      @include columnShownIfMultiplicity($multiplicity);
    }
    @each $property in finance-mode, expert-mode, show-data {
      @include columnShownIf($property, $important: true);
    }
    @each $multiplicity in recurring {
      @include columnHiddenIfMultiplicity($multiplicity);
      @include rowHiddenIfMultiplicity($multiplicity, $relation: "");
      @include rowShownIfMultiplicity($multiplicity, $relation: "");
    }
    @each $cell in th, td {
      @include showAlternateDataType("service-fee", $middle: "#{$cell}.field-data .service-fee-alternatives", $postfix: span);
    }
    &.operation-#{$operation} {
      @if $operation == "change" {
        td, th {
          input[type="number"] {
            text-align:right;
          }
        }
        td[class*="field"] {
          input:not([type=checkbox]), textarea {
            width:100%;
          }
        }
        @each $dataType in cloud-file, cloud-folder, db-file {
          @include columnHiddenIfDataType($dataType);
        }
      }
      @if $operation == "display" {
        td, th {
          &.operations {
            display:none;
          }
        }
        span.service-fee.currency-amount {
          text-align:right;
          display:inline-block;
          width:100%;
        }
        th, td {
          border:1px solid #004D9C;
          &.field-data, &.field-deposit, &.field-limit, &.field-tooltip {
            overflow:hidden;
            text-overflow:ellipsis;
          }
          &.field-data {
            max-width:8em;
          }
          &.field-tooltip {
            max-width:16em;
          }
        }
        td {
          text-align:left;
          &.field-limit {
            text-align:center;
          }
        }
        &.data-type-service-fee td.field-data {
          text-align:right;
        }
        &.data-type-datetime {
          td, th {
            &.field-data {
              max-width:10em;
            }
          }
        }
        &.multiplicity-recurring {
          td, th {
            &.field-data {
              text-align:right;
            }
          }
        }
      }
    }
  }
}

/* principal separator */
#pme-table-container.project-participant-fields {

  /* list-only rules */
  form.pme-form.pme-list {
    table.pme-main {
      td.pme-cell {
        &.data-options {
          @include dataOptionsTable;
        }
        &.participant-field-tooltip, &.default-single-value {
          ul, ol {
            list-style-position:inside!important;
            list-style-type:unset;
          }
          dd {
            display: block;
            margin-left:1em;
          }
          h1, h2, h3, h4, h5 {
            font-weight:bold;
          }
          em {
            font-style:italic;
          }
          b {
            font-style:bold;
          }
        }
      }
    }
  }

  /* dialog-only rules */
  form.pme-form:not(.pme-list) {
    table.pme-main {
      /* tr.multiplicity contains the data-type and multiplicity tags */
      tr.multiplicity {
        @include defaultHiddenRow();
        @each $dataType in service-fee, cloud-file, db-file {
          @include rowShownIfDataType($dataType);
        }
        @each $multiplicity in groupofpeople, groupsofpeople, single, simple, multiple, parallel, recurring {
          @include rowShownIfMultiplicity($multiplicity);
        }
        @each $multiplicity in recurring {
          @include rowHiddenIfMultiplicity($multiplicity);
        }
        @each $dataType in cloud-file, cloud-folder, db-file {
          @include rowHiddenIfDataType($dataType);
        }
        /* Some compound combinations */
        @each $dataType in service-fee {
          @each $multiplicity in groupofpeople, single, simple {
            @include rowShownIf(("multiplicity-#{$multiplicity}" "data-type-#{$dataType}"));
          }
        }
      }
    }
    &.pme-view, &.pme-delete {
      table.pme-main {
        td.pme-value {
          &.data-options {
            @include dataOptionsTable;
          }
        }
      }
    }
    &:not(.pme-view, .pme-delete) {
      table.pme-main {
        textarea.field-tooltip,
        textarea.participant-field-tooltip {
          overflow-x:hidden; /* fix FF extra-line bug */
        }
        tr.multiplicity {
          @each $multiplicity in groupofpeople, single, simple {
            @include defaultHiddenElement(
              "tr td.pme-value.data-options-#{$multiplicity} .active-value .pme-input",
            );
            @each $dataType in html {
              @include elementShownIf(
                "data-type-#{$dataType}",
                "tr td.pme-value.data-options-#{$multiplicity} .active-value .pme-input",
              );
              @include elementHiddenIf(
                "data-type-#{$dataType}",
                "tr td.pme-value.data-options-#{$multiplicity} .active-value .pme-input",
              );
            }
          }
          @include showAlternateDataType("service-fee", $prefix: "&", $middle: "~ tr td .service-fee-alternatives", $postfix: span);
        }
        td.pme-value {
          .chosen-container {
            box-sizing:border-box;
            min-width:50%;
          }
          &.data-options {
            /* pull-up menu for option control */
            position:relative;
            background-clip:padding-box;
            div.field-display-options {
              position:absolute;
              bottom:0px;
              right:0px;
            }
            td.placeholder {
              min-width:35em;
            }
            /* general option table styling */
            @include dataOptionsTable($operation: "change");
            table.data-options {
              /* could move it to the mixin, but it is OTOH only required once */
              tr {
                td {
                  input, textarea {
                    vertical-align:middle;
                  }
                  &.operations {
                    input.operation {
                      background-repeat:no-repeat;
                      background-size: 24px 24px;
                      background-position: center;
                      width:28px;
                      height:28px;
                      vertical-align:middle;
                      margin-right:1em;
                      &.regenerate {
                        /* background-image:url('../img/reload-solid.svg'); */
                        background-image:url('../img/actions/compute-red.svg');
                      }
                      &.regenerate-all {
                        /* background-image:url('../img/reload-solid.svg'); */
                        background-image:url('../img/actions/compute-red.svg');
                      }
                      &.generator-run {
                        background-image:url('../../../core/img/actions/play.svg');
                      }
                      &.delete-undelete {
                        background-image:url('../img/cafevdb-delete.svg');
                      }
                      &.busy {
                        background-image:url('../../../core/img/loading.gif') !important;
                      }
                    }
                  }
                }
                &.deleted td.operations input.delete-undelete {
                  background-image:url('../img/history.svg');
                }
                &.generator {
                  border-top: 1px solid black;
                  td.generator {
                    padding-right:44px;
                  }
                }
              }
              &:not(.multiplicity-recurring) .only-multiplicity-recurring {
                display: none;
              }
              // Hide controls which make no sense in the given context
              &.recurring-generator-run-disabled {
                tr.generator td.operations .generator-run {
                  display:none;
                }
              }
              &.recurring-generator-regenerate-disabled {
                tr.generator td.operations .regenerate-all {
                  display:none;
                }
              }
              &.recurring-option-regenerate-disabled {
                tr td.operations .regenerate {
                  display:none;
                }
              }
              // The following is only for the per-participant controls
              // &.recurring-option-regenerate-all-disabled {
              // }
            } /* data-options table */
          }
        }
      }
    }
  }
}

/* tooltip styling for popup=data */
.tooltip.cafevdb .pme-cell-wrapper {
  @include dataOptionsTable;
  table.data-options {
    th, td {
      &.field-data, &.field-tooltip {
        max-width:8em;
        overflow:hidden;
        text-overflow:ellipsis;
      }
    }
  }
}
